{"version":3,"sources":["webpack:///./src/terra-dev-site/guide/Internationalization/BuildingComponentsWhichIncludeTranslations.e.guide.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iuBAOA,IAKMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,kDADR,kDAGA,6GACA,yBAAK,wBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,0GAQL,2HAAwG,qBAAGA,WAAW,KAAQ,CAC1H,KAAQ,yEAD4F,2CAAxG,wFAGA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gWAoBL,uBAAG,wBAAQA,WAAW,KAAnB,SAAH,IAAiD,oBAAIA,WAAW,KAAf,gJACjD,qCAAkB,4BAAYA,WAAW,KAAvB,sBAAlB,4CAA6H,4BAAYA,WAAW,KAAvB,UAA7H,gEAAgP,qBAAGA,WAAW,KAAQ,CAClQ,KAAQ,yEADoO,2CAAhP,KAGA,+OACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oaAuBL,oUAAiT,4BAAYA,WAAW,KAAvB,SAAjT,QAA2W,4BAAYA,WAAW,KAAvB,eAA3W,iBAAob,4BAAYA,WAAW,KAAvB,cAApb,QAAmf,4BAAYA,WAAW,KAAvB,eAAnf,iCACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gIAOL,gGACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0RAYL,+HAA4G,qBAAGA,WAAW,KAAQ,CAC9H,KAAQ,4DADgG,wDAA5G,KAGA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8fAwBL,+JAA4I,qBAAGA,WAAW,KAAQ,CAC9J,KAAQ,6DADgI,cAA5I,MAOJJ,EAAWK,gBAAiB","file":"429-971a32804a8abce3ce7d.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"building-components-which-include-translations\"\n    }}>{`Building Components Which Include Translations`}</h1>\n    <p>{`Below is an example of a component that renders a button with a hard-coded string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nconst Toggle = () => (\n  <button type=\"button\">Toggle</button>\n);\n`}</code></pre>\n    <p>{`There are various ways to render the string as a translation with react-intl. We recommend using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/yahoo/react-intl/wiki/Components#formattedmessage\"\n      }}>{`react-intl's FormattedMessage component`}</a>{`. Below is an example highlighting the use react-intl's formatted message component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport Base from 'terra-base';\nimport { FormattedMessage } from 'react-intl';\n\nconst Toggle = () => (\n  <button type=\"button\">\n    <FormattedMessage id=\"App.toggle\" />\n  </button>\n);\n\nconst App = () => (\n  <Base className=\"custom-App\" locale=\"en\">\n    <Toggle />\n  </Base>\n);\n\nexport default App;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` `}<em parentName=\"p\">{`The terra-base component doesn't need to wrap individual components with translations, it should be used once to wrap the entire React app.`}</em></p>\n    <p>{`By default `}<inlineCode parentName=\"p\">{`<FormattedMessage>`}</inlineCode>{` will render the formatted string into a `}<inlineCode parentName=\"p\">{`<span>`}</inlineCode>{`. If you need to customize rendering, we recommend using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/yahoo/react-intl/wiki/Components#formattedmessage\"\n      }}>{`render prop version of FormattedMessage`}</a>{`.`}</p>\n    <p>{`For example, the terra-button component has a prop for text, however it only accepts strings. We can use the render prop version of the FormattedMessage component to pass a string to the button text prop like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport Base from 'terra-base';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'terra-button';\n\nconst Toggle = () => (\n  <FormattedMessage id=\"App.toggle\">\n    {txt => (\n      <Button text={txt} />\n    )}\n  </FormattedMessage>\n);\n\nconst App = () => (\n  <Base className=\"custom-App\" locale=\"en\">\n    <Toggle />\n  </Base>\n);\n\nexport default App;\n`}</code></pre>\n    <p>{`This works well and is how we'd recommend rendering a string when a component's API requires a string. There are some props we need to keep as strings due to the fact that the underlying HTML attribute we pass the prop to only accepts string. As an example, let's say we have a component where the `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`placeholder`}</inlineCode>{` props map to `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`placeholder`}</inlineCode>{` HTML attributes on an input.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport Input from './Input';\n\n<Input label={localeLabel} placeholder={localePlaceholder) />\n`}</code></pre>\n    <p>{`We could continue to use the render prop version of FormattedMessage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<FormattedMessage id=\"App.localeLabel\">\n  {localeLabel => (\n    <FormattedMessage id=\"App.localePlaceholder\">\n      {localePlaceHolder => (\n        <Input label={localeLabel} placeholder={localePlaceholder) />\n      )}\n    </FormattedMessage>\n  )}\n</FormattedMessage>\n`}</code></pre>\n    <p>{`However, in this case, instead of nesting multiple FormattedMessage components, we'd recommend using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/yahoo/react-intl/wiki/API#injectintl\"\n      }}>{`react-intl's injectIntl higher-order component (HOC)`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport { injectIntl, intlShape } from 'react-intl';\n\nconst propTypes = {\n  /**\n   * @private\n   * The intl object to be injected for translations. Provided by the injectIntl function.\n   */\n  intl: intlShape.isRequired,\n};\n\nconst Input = ({ intl }) => (\n  <input\n    aria-label={intl.formatMessage({ id: 'App.label' })}\n    placeholder={intl.formatMessage({ id: 'App.placeholder' })}\n  />\n);\n\nInput.propTypes = propTypes;\n\nexport default injectIntl(Input);\n`}</code></pre>\n    <p>{`The react-intl repo contains additional examples that cover using variables, plurals, numbers, and additional use-cases which can be `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/yahoo/react-intl/tree/master/examples\"\n      }}>{`found here`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}