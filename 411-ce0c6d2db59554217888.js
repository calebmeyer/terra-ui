(window.webpackJsonp=window.webpackJsonp||[]).push([[411],{3047:function(e,n,a){"use strict";a.r(n),a.d(n,"default",(function(){return p}));a(0);var t=a(354);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i={};function p(e){var n=e.components,a=r(e,["components"]);return Object(t.mdx)("wrapper",o({},i,a,{components:n,mdxType:"MDXLayout"}),Object(t.mdx)("h1",{id:"how-to-show-loading-overlays"},"How To Show Loading Overlays"),Object(t.mdx)("p",null,"Loading overlays can be rendered within the framework by rendering an ",Object(t.mdx)("a",o({parentName:"p"},{href:"/terra-ui/components/terra-application/application/reference/components/application-loading-overlay"}),"ApplicationLoadingOverlay")," component. Overlays will be rendered by the closest ancestor ",Object(t.mdx)("a",o({parentName:"p"},{href:"/terra-ui/components/terra-application/application/reference/components/application-loading-overlay"}),"ApplicationLoadingOverlayProvider"),". All content rendered within the responsding ApplicationLoadingOverlayProvider will be overlaid."),Object(t.mdx)("pre",null,Object(t.mdx)("code",o({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport ApplicationLoadingOverlay from 'terra-application/lib/application-loading-overlay';\n\nconst ExampleComponent = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div>\n      <p>This component toggles a loading state that lasts for 3 seconds.</p>\n      <p>\n        <button type=\"button\" onClick={() => {\n          setIsLoading(true);\n\n          setTimeout(() => {\n            setIsLoading(false);\n          }, 3000);\n        }}>\n          Start Loading\n        </button>\n      </p>\n      <ApplicationLoadingOverlay isOpen={isLoading} />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n")),Object(t.mdx)("p",null,"Any component that wants to create an overlay container for its children can render its own ",Object(t.mdx)("a",o({parentName:"p"},{href:"/terra-ui/components/terra-application/application/reference/components/application-loading-overlay"}),"ApplicationLoadingOverlayProvider")," to scope overlay presentation to that container."),Object(t.mdx)("blockquote",null,Object(t.mdx)("p",{parentName:"blockquote"},"Note: ApplicationLoadingOverlayProviders are provided by ",Object(t.mdx)("a",o({parentName:"p"},{href:"/terra-ui/components/terra-application/application/reference/components/application-base"}),"ApplicationBase"),", ",Object(t.mdx)("a",o({parentName:"p"},{href:"/terra-ui/components/terra-application/application/reference/components/modal-manager"}),"ModalManager"),", and the ",Object(t.mdx)("a",o({parentName:"p"},{href:"/terra-ui/components/terra-application/application/reference/components/slide-panel-manager"}),"SlidePanelManager"),".")))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=411-ce0c6d2db59554217888.js.map