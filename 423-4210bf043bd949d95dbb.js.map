{"version":3,"sources":["webpack:///./src/terra-dev-site/guide/DockerDevelopmentEnvironment.k.guide.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iuBAOA,IAKMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,kCADR,kCAGA,yMACA,mBAAQ,CACN,GAAM,YADR,YAGA,sIAAmH,4BAAYC,WAAW,KAAvB,OAAnH,QAA2K,4BAAYA,WAAW,KAAvB,QAA3K,KACA,mBAAQ,CACN,GAAM,eADR,eAGA,uPACA,mBAAQ,CACN,GAAM,gBADR,gBAGA,iNACA,mBAAQ,CACN,GAAM,6BADR,6BAGA,0NACA,mBAAQ,CACN,GAAM,wBADR,WAEe,4BAAYA,WAAW,MAAvB,iBACf,0FAAuE,4BAAYA,WAAW,KAAvB,gBAAvE,+DACA,wBACE,oBAAIA,WAAW,MAAf,6FACA,oBAAIA,WAAW,MAAf,wDAA6E,4BAAYA,WAAW,MAAvB,eAA7E,8FAAoO,4BAAYA,WAAW,MAAvB,eAApO,gEAA6V,4BAAYA,WAAW,MAAvB,gBAA7V,uCAA8b,4BAAYA,WAAW,MAAvB,gBAA9b,cAAsgB,4BAAYA,WAAW,MAAvB,eAAtgB,6BAEF,mBAAQ,CACN,GAAM,sBADR,sBAGA,qFACA,yBAAK,wBAAMA,WAAW,OAAU,IAA3B,2BAEL,mBAAQ,CACN,GAAM,aADR,aAGA,+EACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6CAIL,iGAA8E,4BAAYA,WAAW,KAAvB,gBAA9E,qDAA4L,4BAAYA,WAAW,KAAvB,iBAA5L,sFACA,qEACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+CAIL,iGAA8E,4BAAYA,WAAW,KAAvB,gBAA9E,mEAA0M,4BAAYA,WAAW,KAAvB,iBAA1M,wDACA,mBAAQ,CACN,GAAM,WADR,WAGA,oDAAiC,4BAAYA,WAAW,KAAvB,mBAAjC,6HACA,mBAAQ,CACN,GAAM,qBADR,qBAGA,4FACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0BAIL,2HACA,mBAAQ,CACN,GAAM,4BADR,4BAGA,4QACA,uCACA,uCACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oEAML,6CACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0PAeL,mBAAQ,CACN,GAAM,sCADR,sCAGA,gNACA,2EACA,yBAAK,wBAAMA,WAAW,OAAU,IAA3B,sDAEL,wEACA,yBAAK,wBAAMA,WAAW,OAAU,IAA3B,mEAEL,mBAAQ,CACN,GAAM,mBADR,mBAGA,mBAAQ,CACN,GAAM,yBADR,0BAGA,8RAA2Q,4BAAYA,WAAW,KAAvB,gBAA3Q,6EACA,mBAAQ,CACN,GAAM,wCADR,yCAGA,6FAA0E,4BAAYA,WAAW,KAAvB,gBAA1E,sGAAyO,4BAAYA,WAAW,KAAvB,gBAAzO,yHAA2Z,4BAAYA,WAAW,KAAvB,gBAA3Z,4CAKJJ,EAAWK,gBAAiB","file":"423-4210bf043bd949d95dbb.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"docker-development-environment\"\n    }}>{`Docker Development Environment`}</h2>\n    <p>{`Terra provides a docker development environment that allows developers access to a common environment to develop Terra components regardless of the OS they are developing on.`}</p>\n    <h3 {...{\n      \"id\": \"services\"\n    }}>{`Services`}</h3>\n    <p>{`In each Terra repository there is a docker-compose.yml file that defines several services, most importantly `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`term`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"dev-service\"\n    }}>{`Dev Service`}</h4>\n    <p>{`The dev service provides a linux environment with node and npm pre-installed. By default the dev service volume mounts the entire local repo directory into the docker container to enable hot reloading during development.`}</p>\n    <h4 {...{\n      \"id\": \"term-service\"\n    }}>{`Term Service`}</h4>\n    <p>{`The term service behaves like the dev service, but will launch the zsh terminal instead of starting the server. You can use this terminal just like you would use your local terminal.`}</p>\n    <h4 {...{\n      \"id\": \"standalone-chrome-service\"\n    }}>{`Standalone Chrome Service`}</h4>\n    <p>{`Terra's webdriver.io integration tests must run against selenium standalone-chrome node, so this service is required to run wdio tests. It is started alongside both the dev and term services.`}</p>\n    <h3 {...{\n      \"id\": \"sharing-node_modules\"\n    }}>{`Sharing `}<inlineCode parentName=\"h3\">{`node_modules`}</inlineCode></h3>\n    <p>{`The docker development environment intentionally will write out `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` to the shared host volume. This provides several benefits:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Simpler volume mounting, everything edited in the repo is shared to the docker container.`}</li>\n      <li parentName=\"ul\">{`Node module cacheing. For the development containers `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode>{` is run at run time of the docker container (opposed to build time). This is done to allow `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode>{` to discover local dependencies. To avoid long startup times `}<inlineCode parentName=\"li\">{`node_modules`}</inlineCode>{` are cached to the local volume. If `}<inlineCode parentName=\"li\">{`node_modules`}</inlineCode>{` are found `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode>{` is not run at run time.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"before-development\"\n    }}>{`Before Development`}</h3>\n    <p>{`To build all the services in the docker-compose file, run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker-compose build\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"develping\"\n    }}>{`Develping`}</h3>\n    <p>{`To get started developing with the dev service, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker-compose run --service-ports dev\n`}</code></pre>\n    <p>{`This will start the docker container for the repo, run npm install (if `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` are not detected) and start the dev server using `}<inlineCode parentName=\"p\">{`npm run start`}</inlineCode>{`. Then you're free to use your favorite editor to manipulate the code in the repo.`}</p>\n    <p>{`OR, to develop with the term service, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker-compose run  --service-ports term\n`}</code></pre>\n    <p>{`This will start the docker container for the repo, run npm install (if `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` are not detected) and then launch the zsh terminal. Simply run `}<inlineCode parentName=\"p\">{`npm run start`}</inlineCode>{` once the terminal has launched to start the server.`}</p>\n    <h3 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h3>\n    <p>{`It is required to use the `}<inlineCode parentName=\"p\">{`--service-ports`}</inlineCode>{` flag when running either service to run wdio tests from the docker container. This maps the service's ports to the host.`}</p>\n    <h3 {...{\n      \"id\": \"after-development\"\n    }}>{`After development`}</h3>\n    <p>{`After you've finished running development (or periodically), run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`docker-compose down\n`}</code></pre>\n    <p>{`This will stop the standalone-chrome service that will otherwise be left running on your device.`}</p>\n    <h3 {...{\n      \"id\": \"using-local-dependencies\"\n    }}>{`Using Local Dependencies`}</h3>\n    <p>{`Local dependencies are supported in the docker development environment, but require an additional step. For the docker container to be able to find the local dependency, it must be volume mounted to the docker container from the dev service.`}</p>\n    <p>{`For example:`}</p>\n    <p>{`package.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"dependencies\": {\n    \"classnames\": \"file:../classnames\",\n}\n`}</code></pre>\n    <p>{`docker-compose.yml`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`dev:\n  image: \"terra-ui:dev\"\n  build:\n    context: ./\n    args:\n      - npm_install=false\n  ports:\n    - 8080:8080\n  volumes:\n    - .:/opt/module\n+    # This is the local dependency volume mount.\n+    - ../classnames:/opt/classnames\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"other-ways-to-run-the-zsh-terminal\"\n    }}>{`Other Ways to Run the Zsh Terminal`}</h3>\n    <p>{`There a couple of additional methods of running the terminal on the docker container. Either run a terminal through docker-compose or use docker to attach to a running docker image.`}</p>\n    <p>{`To launch to the terminal on the dev image, run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker-compose run --service-ports dev /bin/zsh\n`}</code></pre>\n    <p>{`To attach to a running docker container, run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker exec -it <hash for running docker container> /bin/zsh\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"troubleshooting\"\n    }}>{`Troubleshooting`}</h3>\n    <h4 {...{\n      \"id\": \"error-missing-binding\"\n    }}>{`Error: Missing binding`}</h4>\n    <p>{`This error means that a node_module install for one environment is being run in another. Likely this means that you ran npm install on your host OS and are now trying to use that module in your docker container or the opposite. To resolve the issue delete the `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` folder and run npm_install where you are attempting to start the server.`}</p>\n    <h4 {...{\n      \"id\": \"dependency-changes-not-taking-effect\"\n    }}>{`Dependency changes not taking effect.`}</h4>\n    <p>{`npm install is triggered at run time of the docker container. If a `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` directory is found npm install will not run. If dependencies have changed the script checking for `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` isn't smart enough to re-run npm install. To resolve the issue either term servcie and run npm install or delete the `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` folder and rerun the docker container.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}