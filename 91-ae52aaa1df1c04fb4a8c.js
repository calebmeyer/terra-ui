(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{2084:function(e,t,l){"use strict";l.r(t),t.default="# Terra Clinical Flowsheet Result Cell\n\nThe Clinical Result is a standardized view for single result values added to a Patient's Medical Chart. The flowsheet result cell is specifically for the grid display of a result collection, and can handle displaying an indication of multiple results.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n```\n$ npm install terra-clinical-result\n```\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Component Features\n\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n* [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n\n## Usage Guide\n\nThe flowsheet cell for clinical results is constructed by providing the same structured object as the clinical result in an array, allowing for multiple results to be indicated in the same time cell.\n\nCurrently the Flowsheet expects an array of one or more results - and if there are multiple, it will display the first in the array, with an indication of additional results. Updates are in progress to also look at the performedDateTime value if provided to evaluate which result is the most recent to appropriately display, regardless of which order index position in the array it is.\n\n\n```jsx\n/* ------ Structure for the resultData object for the Flowsheet Result Cell, can support multiple results ------ */\n\n /**\n  *  A set of clinical results.                                                          .\n  */\n\n  resultDataSet = [\n    {\n      /**\n       *  A single clinical result or blood pressure result.\n       *  Same as {resultData} for clinical-result and clinical-result-blood-pressure\n       */\n      eventId:'1574537491',\n      result: { /* ... */ },\n    },\n    {\n      /**\n       *  A single clinical result or blood pressure result.\n       *  Same as {resultData} for clinical-result and clinical-result-blood-pressure\n       */\n      eventId:'1574537491',\n      result: { /* ... */ },\n    },\n    {\n      /**\n       *  A single clinical result or blood pressure result.\n       *  Same as {resultData} for clinical-result and clinical-result-blood-pressure\n       */\n      eventId:'1574537491',\n      result: { /* ... */ },\n    },\n  ]\n\n```\n\n\nAn example of a single clinical result value in a flowsheet cell:\n```jsx\nimport React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\n\nconst singleResultValue = [\n  {\n    eventId: '1574537491',\n    result: {\n      value: '101.9',\n      unit: 'degC',\n    },\n    interpretation: 'critical',\n    isNumeric: true,\n    isModified: true,\n    hasComment: true,\n    isUnverified: true,\n    conceptDisplay: 'Temperature Oral',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n];\n\nexport default () => <FlowsheetResultCell resultDataSet={singleResultValue} />;\n\n```\n\n\nAn example of multiple clinical blood pressure result values:\n```jsx\nimport React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst multipleResultBPValues = [\n  {\n    id: '1577895000-1',\n    systolic: {\n      eventId: '1577895000-1.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1577895000-1.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1577895000-2',\n    systolic: {\n      eventId: '1577895000-2.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1577895000-2.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1577895000-3',\n    systolic: {\n      eventId: '1577895000-3.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1577895000-3.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n  },\n];\n\nexport default () => <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit />;\n\n```\n"},2085:function(e,t,l){"use strict";l.r(t),t.default="import React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames/bind';\nimport IconComment from 'terra-icon/lib/icon/IconComment';\nimport IconModified from 'terra-icon/lib/icon/IconModified';\nimport IconUnverified from 'terra-icon/lib/icon/IconDiamond';\nimport ClinicalResult from '../ClinicalResult';\nimport ClinicalResultBloodPressure from '../ClinicalResultBloodPressure';\nimport observationPropShape from '../proptypes/observationPropTypes';\nimport EnteredInError from '../common/other/_EnteredInError';\nimport ResultError from '../common/other/_ResultError';\nimport NoData from '../common/other/_KnownNoData';\nimport NumericOverflow from '../common/other/_NumericOverflow';\nimport { isEmpty, checkIsStatusInError, checkTypeNumeric } from '../common/utils';\nimport styles from './FlowsheetResultCell.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   *  A set of clinical results. Example object structure listed above.                                              .\n   */\n  resultDataSet: PropTypes.arrayOf(PropTypes.shape({\n    /**\n     *  A single clinical result or blood pressure result id.\n     */\n    id: PropTypes.string,\n    /**\n     *  A single clinical result or blood pressure result.\n     */\n    resultData: observationPropShape,\n  })),\n  /**\n   * Visually hides the unit of measure when presented in a series of side-by-side columns of the same unit.\n   */\n  hideUnit: PropTypes.bool,\n  /**\n   * The padding styling to apply to the Time Column Header Cell.\n   * One of `'none'`, `'standard'`, `'compact'`.\n   */\n  paddingStyle: PropTypes.oneOf(['none', 'standard', 'compact']),\n  /**\n   * Override that shows an Error display. Used when there is a known error or problem when retrieving or assembling the clinical result data.\n   */\n  hasResultError: PropTypes.bool,\n  /**\n   * Override that shows a known \"No Data\" display. Used when there is known to be no value for a given clinical result concept at a specific datetime.\n   */\n  hasResultNoData: PropTypes.bool,\n  /**\n   * @private\n   * The intl object to be injected for translations.\n   */\n  intl: intlShape.isRequired,\n};\n\nconst defaultProps = {\n  resultDataSet: [],\n  paddingStyle: 'compact',\n};\n\nconst interpretationsWithIcons = [\n  'critical',\n  'critical-high',\n  'critical-low',\n  'positive',\n  'abnormal',\n  'high',\n  'low',\n];\n\nconst createEndIcons = (hasCommentIcon, hasModifiedIcon, hasUnverifiedIcon, resultKeyID) => {\n  if (!hasCommentIcon && !hasModifiedIcon && !hasUnverifiedIcon) {\n    return null;\n  }\n  let iconElements;\n  if (hasUnverifiedIcon) {\n    iconElements = <IconUnverified className={cx('icon-unverified')} />;\n  } else {\n    iconElements = (\n      <React.Fragment>\n        {hasCommentIcon ? (<IconComment className={cx('icon-comment')} />) : null}\n        {hasModifiedIcon ? (<IconModified className={cx('icon-modified')} />) : null}\n      </React.Fragment>\n    );\n  }\n  return (\n    <div key={(`EndAccessoryIcons-${resultKeyID}`)} className={cx('end-accessory-icons')}>\n      <div className={cx('end-accessory-stack')}>\n        {iconElements}\n      </div>\n    </div>\n  );\n};\n\nconst createEndAdditionalResultsStack = (count, interpretationsArr, hasAccessoryIcons, resultKeyID) => {\n  const displayCount = count;\n  if (displayCount < 1) {\n    return null;\n  }\n  let additionalResultInterpretationIndicator;\n  if ([\n    'critical',\n    'critical-high',\n    'critical-low',\n    'positive',\n  ].some(r => interpretationsArr.indexOf(r) >= 0)) {\n    additionalResultInterpretationIndicator = 'critical';\n  } else if ([\n    'abnormal',\n    'high',\n    'low',\n  ].some(r => interpretationsArr.indexOf(r) >= 0)) {\n    additionalResultInterpretationIndicator = 'high';\n  }\n  const additionalResultClassNames = cx([\n    'additional-end-display',\n    { 'no-accessory-icons': !hasAccessoryIcons },\n    { 'interpretation-critical': additionalResultInterpretationIndicator === 'critical' },\n    { 'interpretation-high': additionalResultInterpretationIndicator === 'high' },\n  ]);\n  const additionalCountDisplayValue = (displayCount > 99)\n    ? (<span className={cx(['additional-results-value', 'additional-results-max-value'])}>99+</span>)\n    : (<span className={cx('additional-results-value')}>{displayCount}</span>);\n  return (\n    <div key={(`AdditionalResultsDisplay-${resultKeyID}`)} className={additionalResultClassNames}>\n      <div className={cx('additional-results-stack')}>\n        {additionalCountDisplayValue}\n        {additionalCountDisplayValue}\n      </div>\n    </div>\n  );\n};\n\nconst createClinicalResultDisplay = (children, hasUnverifiedIcon, hasInterpretationIcon, containerDivRef, resultKeyID) => {\n  const primaryResultClassnames = cx([\n    'primary-display',\n    { interpretation: hasInterpretationIcon && !hasUnverifiedIcon },\n  ]);\n  return (<div key={(`ClinicalResultDisplay-${resultKeyID}`)} className={primaryResultClassnames} ref={containerDivRef}>{children}</div>);\n};\n\nconst createStandardResultDisplay = (resultDataItem, hasUnverifiedIcon, hasInterpretationIcon, hideUnit, resultKeyID, numericOverflow, containerDivRef) => {\n  const {\n    status,\n  } = resultDataItem;\n  let resultsInnerDisplay;\n  const isStatusInError = !isEmpty(status) ? checkIsStatusInError(status) : false;\n  if (isStatusInError) {\n    resultsInnerDisplay = <EnteredInError />;\n  } else if (numericOverflow) {\n    resultsInnerDisplay = <NumericOverflow />;\n  } else {\n    resultsInnerDisplay = <ClinicalResult key={(`ClinicalResult-${resultKeyID}`)} {...resultDataItem} hideUnit={hideUnit} isTruncated isUnverified={hasUnverifiedIcon} hideAccessoryDisplays />;\n  }\n  const clinicalResultDisplay = createClinicalResultDisplay(resultsInnerDisplay, hasUnverifiedIcon, hasInterpretationIcon, containerDivRef, resultKeyID);\n  return clinicalResultDisplay;\n};\n\nconst createBloodPressureResultDisplay = (resultDataItem, hasUnverifiedIcon, hasInterpretationIcon, hideUnit, resultKeyID, containerDivRef) => {\n  const {\n    systolic,\n    diastolic,\n  } = resultDataItem;\n  let resultsInnerDisplay;\n  const isStatusInError = {\n    systolic: !isEmpty(systolic) ? checkIsStatusInError(systolic.status) : false,\n    diastolic: !isEmpty(diastolic) ? checkIsStatusInError(diastolic.status) : false,\n  };\n  if (isStatusInError.systolic || isStatusInError.diastolic) {\n    resultsInnerDisplay = <EnteredInError />;\n  } else {\n    resultsInnerDisplay = (<ClinicalResultBloodPressure key={(`ClinicalResultBloodPressure-${resultKeyID}`)} systolic={systolic} diastolic={diastolic} hideUnit={hideUnit} isTruncated hideAccessoryDisplays />);\n  }\n  const clinicalResultDisplay = createClinicalResultDisplay(resultsInnerDisplay, hasUnverifiedIcon, hasInterpretationIcon, containerDivRef, resultKeyID);\n  return clinicalResultDisplay;\n};\n\nconst setResultKeyID = (isBloodPressureResult, resultData) => {\n  if (isBloodPressureResult) {\n    if (resultData.id) {\n      return resultData.id;\n    }\n    if (!isEmpty(resultData.systolic) && resultData.systolic.eventId) {\n      return resultData.systolic.eventId;\n    }\n    if (!isEmpty(resultData.diastolic) && resultData.diastolic.eventId) {\n      return resultData.diastolic.eventId;\n    }\n  } else {\n    if (resultData.id) {\n      return resultData.id;\n    }\n    if (resultData.eventId) {\n      return resultData.eventId;\n    }\n  }\n  return null;\n};\n\nconst checkIfSingleOrPairedResult = (resultDataItem) => {\n  const isSingleResult = !!resultDataItem.result || false;\n  if (isSingleResult) {\n    return { isSingleResult, isPairedResult: false };\n  }\n  const hasSystolicData = !isEmpty(resultDataItem.systolic) ? resultDataItem.systolic.result : false;\n  const hasDiastolicData = !isEmpty(resultDataItem.diastolic) ? resultDataItem.diastolic.result : false;\n  const isPairedResult = (hasSystolicData || hasDiastolicData) || false;\n  return { isSingleResult, isPairedResult };\n};\n\nconst AttributesTemplate = (interpretationValue = false, commentBool = false, modifiedBool = false, unverifiedBool = false) => ({\n  interpretationIcon: !!interpretationValue,\n  comment: commentBool,\n  modified: modifiedBool,\n  unverified: unverifiedBool,\n});\n\nconst unpackResultAttributes = (resultDataItem) => {\n  const {\n    interpretation,\n    hasComment,\n    isModified,\n    isUnverified,\n  } = resultDataItem;\n  const itemAttributes = new AttributesTemplate();\n  itemAttributes.interpretationIcon = interpretationsWithIcons.includes(interpretation);\n  itemAttributes.comment = hasComment;\n  itemAttributes.modified = isModified;\n  itemAttributes.unverified = isUnverified;\n  return itemAttributes;\n};\n\nconst unpackResultDataSet = (resultDataSet) => {\n  const firstResultData = resultDataSet[0];\n  let firstResultAttributes = {};\n  const { isSingleResult, isPairedResult } = checkIfSingleOrPairedResult(firstResultData);\n  if (isSingleResult) {\n    firstResultAttributes = unpackResultAttributes(firstResultData);\n  } else if (isPairedResult) {\n    const bpAttribute = {\n      systolic: null,\n      diastolic: null,\n    };\n    const systolicData = firstResultData.systolic;\n    const diastolicData = firstResultData.diastolic;\n    bpAttribute.systolic = !isEmpty(systolicData) ? unpackResultAttributes(systolicData) : new AttributesTemplate();\n    bpAttribute.diastolic = !isEmpty(diastolicData) ? unpackResultAttributes(diastolicData) : new AttributesTemplate();\n    firstResultAttributes = new AttributesTemplate(\n      (bpAttribute.systolic.interpretationIcon),\n      (bpAttribute.systolic.comment || bpAttribute.diastolic.comment),\n      (bpAttribute.systolic.modified || bpAttribute.diastolic.modified),\n      (bpAttribute.systolic.unverified || bpAttribute.diastolic.unverified),\n    );\n  }\n  const isfirstSingleResult = isSingleResult;\n  const isfirstPairedResult = isPairedResult;\n  const resultKeyID = setResultKeyID(isfirstPairedResult, firstResultData);\n  return {\n    isfirstSingleResult,\n    isfirstPairedResult,\n    firstResultAttributes,\n    firstResultData,\n    resultKeyID,\n  };\n};\n\nconst createFlowsheetResultCellDisplay = (resultDataSet, hideUnit, numericOverflow, containerDivRef) => {\n  const {\n    isfirstSingleResult,\n    isfirstPairedResult,\n    firstResultAttributes,\n    firstResultData,\n    resultKeyID,\n  } = unpackResultDataSet(resultDataSet);\n  const compositeCell = [];\n  if (!isfirstSingleResult && !isfirstPairedResult) {\n    compositeCell.push(<ResultError />);\n  } else if (isfirstSingleResult) {\n    const firstResultDisplay = createStandardResultDisplay(firstResultData, firstResultAttributes.unverified, firstResultAttributes.interpretationIcon, hideUnit, resultKeyID, numericOverflow, containerDivRef);\n    compositeCell.push(firstResultDisplay);\n  } else {\n    const firstResultDisplay = createBloodPressureResultDisplay(firstResultData, firstResultAttributes.unverified, firstResultAttributes.interpretationIcon, hideUnit, resultKeyID, containerDivRef);\n    compositeCell.push(firstResultDisplay);\n  }\n  const additionalResultCount = resultDataSet.length - 1;\n  if (additionalResultCount > 0) {\n    const additionalResultInterpretations = [];\n    const additionalResultList = resultDataSet.slice(1, resultDataSet.length);\n    additionalResultList.forEach((result) => {\n      const { isSingleResult, isPairedResult } = checkIfSingleOrPairedResult(result);\n      if (isSingleResult) {\n        const resultInterpretation = !isEmpty(result.interpretation) && !result.isUnverified ? result.interpretation : null;\n        additionalResultInterpretations.push(resultInterpretation);\n      } else if (isPairedResult) {\n        const sysInterpretation = !isEmpty(result.systolic.interpretation) && !result.systolic.isUnverified ? result.systolic.interpretation : null;\n        const diaInterpretation = !isEmpty(result.diastolic.interpretation) && !result.diastolic.isUnverified ? result.diastolic.interpretation : null;\n        additionalResultInterpretations.push(sysInterpretation);\n        additionalResultInterpretations.push(diaInterpretation);\n      }\n    });\n    const displayCount = additionalResultCount + 1;\n    const hasAccessoryIcons = (firstResultAttributes.comment || firstResultAttributes.modified || firstResultAttributes.unverified);\n    const additionalResultsStackDisplay = createEndAdditionalResultsStack(displayCount, additionalResultInterpretations, hasAccessoryIcons, resultKeyID);\n    compositeCell.push(additionalResultsStackDisplay);\n  }\n  const endAccessoryIcons = createEndIcons(firstResultAttributes.comment, firstResultAttributes.modified, firstResultAttributes.unverified, resultKeyID);\n  compositeCell.push(endAccessoryIcons);\n\n  return compositeCell;\n};\n\nconst FlowsheetResultCell = (props) => {\n  const {\n    resultDataSet,\n    hideUnit,\n    paddingStyle,\n    hasResultError,\n    hasResultNoData,\n    intl,\n    ...customProps\n  } = props;\n  const containerDiv = useRef(null);\n  const [contentWidth, setContentWidth] = useState(null);\n  const [numericOverflow, setNumericOverflow] = useState(false);\n\n  useEffect(() => {\n    if (!containerDiv.current || !resultDataSet[0]) {\n      return;\n    }\n    if (checkTypeNumeric(resultDataSet[0])) {\n      if (!contentWidth) {\n        setContentWidth(containerDiv.current.children[0].getBoundingClientRect().width);\n      }\n      const containerWidth = containerDiv.current.getBoundingClientRect().width;\n      if (containerWidth <= contentWidth && !numericOverflow) {\n        setNumericOverflow(true);\n      } else if (containerWidth > contentWidth) {\n        setNumericOverflow(false);\n      }\n    }\n  }, [resultDataSet, contentWidth, numericOverflow]);\n\n  let flowsheetResultCellDisplay;\n\n  if (hasResultError) {\n    flowsheetResultCellDisplay = <div key=\"ClinicalResultDisplay-Error\" className={cx(['primary-display', 'error'])}><ResultError /></div>;\n  } else if (hasResultNoData) {\n    flowsheetResultCellDisplay = <div key=\"ClinicalResultDisplay-NoData\" className={cx('primary-display')}><NoData /></div>;\n  } else if (!resultDataSet || !resultDataSet.length) {\n    flowsheetResultCellDisplay = <div key=\"ClinicalResultDisplay-Error\" className={cx(['primary-display', 'error'])}><ResultError /></div>;\n  } else {\n    flowsheetResultCellDisplay = createFlowsheetResultCellDisplay(resultDataSet, hideUnit, numericOverflow, containerDiv);\n  }\n\n  const flowsheetCellClassNames = cx([\n    'flowsheet-result-cell',\n    { 'padding-standard': paddingStyle === 'standard' },\n    { 'padding-compact': paddingStyle === 'compact' },\n  ]);\n\n  return (\n    <div\n      {...customProps}\n      className={customProps.className ? `${flowsheetCellClassNames} ${customProps.className}` : flowsheetCellClassNames}\n    >\n      {flowsheetResultCellDisplay}\n    </div>\n  );\n};\n\nFlowsheetResultCell.propTypes = propTypes;\nFlowsheetResultCell.defaultProps = defaultProps;\n\nexport default injectIntl(FlowsheetResultCell);\n"},2086:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,s=(n=l(0))&&n.__esModule?n:{default:n},i=l(1005);var a=[{eventId:"111",result:{value:"12345.678",unit:"mL"},isModified:!0,hasComment:!0}];t.default=function(){return s.default.createElement(i.FlowsheetResultCell,{resultDataSet:a})}},2087:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\n\nconst singleResultValue = [\n  {\n    eventId: '111',\n    result: {\n      value: '12345.678',\n      unit: 'mL',\n    },\n    isModified: true,\n    hasComment: true,\n  },\n];\n\nexport default () => <FlowsheetResultCell resultDataSet={singleResultValue} />;\n"},2088:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{eventId:"1602328271",result:{value:"101.1",unit:"degC"},isNumeric:!0,isModified:!0,hasComment:!0},{eventId:"1602328282",result:{value:"101.2",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1},{eventId:"1602328293",result:{value:"101.3",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})))}},2089:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst multipleResultValues = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.1',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: true,\n    hasComment: true,\n  },\n  {\n    eventId: '1602328282',\n    result: {\n      value: '101.2',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n  {\n    eventId: '1602328293',\n    result: {\n      value: '101.3',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n  </React.Fragment>\n);\n"},2090:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{id:"111",systolic:{eventId:"111.1",result:{value:"111",unit:"mmHg"},interpretation:"critical"},diastolic:{eventId:"111.2",result:{value:"77",unit:"mmHg"}}}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})))}},2091:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst bloodpressureResultValue = [\n  {\n    id: '111',\n    systolic: {\n      eventId: '111.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n    },\n    diastolic: {\n      eventId: '111.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n    },\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={bloodpressureResultValue} hideUnit />\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n  </React.Fragment>\n);\n"},2092:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{id:"1602328271-1",systolic:{eventId:"1602328271-1.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-1.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-2",systolic:{eventId:"1602328271-2.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-2.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-3",systolic:{eventId:"1602328271-3.1",result:{value:"111",unit:"mmHg"},isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-3.2",result:{value:"77",unit:"mmHg"},isModified:!0,hasComment:!0}}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})))}},2093:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst multipleResultBPValues = [\n  {\n    id: '1602328271-1',\n    systolic: {\n      eventId: '1602328271-1.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-1.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-2',\n    systolic: {\n      eventId: '1602328271-2.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-2.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-3',\n    systolic: {\n      eventId: '1602328271-3.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-3.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit />\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n  </React.Fragment>\n);\n"},2094:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{eventId:"1602328271",result:{value:"101.1",unit:"degC"},interpretation:"critical",isUnverified:!0}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","empty"])})))}},2095:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst unverifiedResultValue = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.1',\n      unit: 'degC',\n    },\n    interpretation: 'critical',\n    isUnverified: true,\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit />\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n    </div>\n  </React.Fragment>\n);\n"},2096:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{id:"1602328271-1",systolic:{eventId:"1602328271-1.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-1.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-2",systolic:{eventId:"1602328271-2.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-2.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-3",systolic:{eventId:"1602328271-3.1",result:{value:"111",unit:"mmHg"},isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-3.2",result:{value:"77",unit:"mmHg"},isModified:!0,hasComment:!0}}],c=[{eventId:"1602328271",result:{value:"101.1",unit:"degC"},isNumeric:!0,isUnverified:!0}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","short"])},"none"),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","with-padding"])},"compact"),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","with-padding","medium"])},"standard")),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","short"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0,paddingStyle:"none"})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0,paddingStyle:"compact"})),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","medium"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0,paddingStyle:"standard"}))),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","short"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:c,hideUnit:!0,paddingStyle:"none"})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:c,hideUnit:!0,paddingStyle:"compact"})),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn-cell","medium"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:c,hideUnit:!0,paddingStyle:"standard"}))))}},2097:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst multipleResultBPValues = [\n  {\n    id: '1602328271-1',\n    systolic: {\n      eventId: '1602328271-1.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-1.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-2',\n    systolic: {\n      eventId: '1602328271-2.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-2.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-3',\n    systolic: {\n      eventId: '1602328271-3.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-3.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n  },\n];\n\nconst unverifiedResultValue = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.1',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isUnverified: true,\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'short'])}>\n        none\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'with-padding'])}>\n        compact\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'with-padding', 'medium'])}>\n        standard\n      </div>\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'short'])}>\n        <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit paddingStyle=\"none\" />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit paddingStyle=\"compact\" />\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'medium'])}>\n        <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit paddingStyle=\"standard\" />\n      </div>\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'short'])}>\n        <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit paddingStyle=\"none\" />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit paddingStyle=\"compact\" />\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'medium'])}>\n        <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit paddingStyle=\"standard\" />\n      </div>\n    </div>\n  </React.Fragment>\n);\n"},2098:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{id:"111",systolic:{eventId:"111.1",resultNoData:!0},diastolic:{eventId:"111.2",result:{value:"77",unit:"mmHg"},interpretation:"critical"}}],c=[{id:"222",systolic:{eventId:"222.1",result:{value:"140",unit:"mmHg"},interpretation:"high"},diastolic:{eventId:"222.2",resultNoData:!0}}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{hasResultNoData:!0}))),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:c,hideUnit:!0}))))}},2099:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst partialResultValueWithNoDataPropSystolic = [\n  {\n    id: '111',\n    systolic: {\n      eventId: '111.1',\n      resultNoData: true,\n    },\n    diastolic: {\n      eventId: '111.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n    },\n  },\n];\n\nconst partialResultValueWithNoDataPropDiastolic = [\n  {\n    id: '222',\n    systolic: {\n      eventId: '222.1',\n      result: {\n        value: '140',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n    },\n    diastolic: {\n      eventId: '222.2',\n      resultNoData: true,\n    },\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    {/* This example column shows a standard result with the `hasResultNoData` prop or `result: { value: null, }` */}\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell hasResultNoData />\n      </div>\n    </div>\n    {/* This example column shows a partial Blood Pressure no data display using the `resultNoData` property name */}\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={partialResultValueWithNoDataPropSystolic} hideUnit />\n      </div>\n    </div>\n    {/* This example column shows a partial Blood Pressure no data display using `result: { value: null, }` */}\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={partialResultValueWithNoDataPropDiastolic} hideUnit />\n      </div>\n    </div>\n  </React.Fragment>\n);\n"},2100:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{id:"111",diastolic:{eventId:"111.2",result:{value:"77",unit:"mmHg"},interpretation:"critical"}}],c=[{id:"222",systolic:{eventId:"222.1",result:{value:"140",unit:"mmHg"},interpretation:"high"}}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{hasResultError:!0}))),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:c,hideUnit:!0}))))}},2101:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst partialResultValueWithNoSystolic = [\n  {\n    id: '111',\n    diastolic: {\n      eventId: '111.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n    },\n  },\n];\n\nconst partialResultValueWithNoDiastolic = [\n  {\n    id: '222',\n    systolic: {\n      eventId: '222.1',\n      result: {\n        value: '140',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n    },\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    {/* This example column shows how to use the `hasResultError` prop */}\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell hasResultError />\n      </div>\n    </div>\n    {/* This example column shows the error display when the Systolic property name is not present */}\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={partialResultValueWithNoSystolic} hideUnit />\n      </div>\n    </div>\n    {/* This example column shows the error display when the Diastolic property name is not present */}\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={partialResultValueWithNoDiastolic} hideUnit />\n      </div>\n    </div>\n  </React.Fragment>\n);\n"},2102:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}var o=i.default.bind(a.default),u=[{eventId:"1602328271",result:{value:"101.123456789123456789123456789123456789123456789",unit:"degC"},isNumeric:!0,isModified:!0,hasComment:!0},{eventId:"1602328282",result:{value:"101.2",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1},{eventId:"1602328293",result:{value:"101.3",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn","half-column"])},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:o(["mock-flowsheet-resultcolumn","triple-column"])},n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:o("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))))}},2103:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst multipleResultValues = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.123456789123456789123456789123456789123456789',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: true,\n    hasComment: true,\n  },\n  {\n    eventId: '1602328282',\n    result: {\n      value: '101.2',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n  {\n    eventId: '1602328293',\n    result: {\n      value: '101.3',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n    </div>\n    <div className={cx(['mock-flowsheet-resultcolumn', 'half-column'])}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n    </div>\n    <div className={cx(['mock-flowsheet-resultcolumn', 'triple-column'])}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n      </div>\n    </div>\n  </React.Fragment>\n);\n"},2104:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),s=l(1005),i=r(l(4)),a=r(l(1018));function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function u(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){c(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function c(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}var d=i.default.bind(a.default),m={result:{value:"12345.678",unit:"mL"}},f={eventId:"1602328271.1",result:{value:"120",unit:"mmHg"}},p={eventId:"1602328271.2",result:{value:"80",unit:"mmHg"}},h=[u({eventId:"1577836800"},m,{status:"entered-in-error"}),u({eventId:"1577836911"},m)],v=[{id:"111",systolic:u({},f,{status:"entered-in-error"}),diastolic:u({},p)},{id:"112",systolic:u({},f),diastolic:u({},p)}],w=[{id:"211",systolic:u({},f,{status:"entered-in-error"}),diastolic:u({},p,{status:"entered-in-error"})},{id:"212",systolic:u({},f),diastolic:u({},p)}];t.default=function(){return n.default.createElement(n.default.Fragment,null,n.default.createElement("div",{className:d(["mock-flowsheet-resultcolumn","double-column"])},n.default.createElement("div",{className:d(["mock-flowsheet-resultcolumn-cell","with-padding"])},"standard result"),n.default.createElement("div",{className:d(["mock-flowsheet-resultcolumn-cell","wide","with-padding"])},"blood pressure: systolic-only"),n.default.createElement("div",{className:d(["mock-flowsheet-resultcolumn-cell","wide","with-padding"])},"blood pressure: both systolic & diastolic")),n.default.createElement("div",{className:d("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:d("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:h,hideUnit:!0})),n.default.createElement("div",{className:d("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:v,hideUnit:!0})),n.default.createElement("div",{className:d("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:w,hideUnit:!0}))))}},2105:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst partialStandard = {\n  result: {\n    value: '12345.678',\n    unit: 'mL',\n  },\n};\n\nconst partialSystolic = {\n  eventId: '1602328271.1',\n  result: {\n    value: '120',\n    unit: 'mmHg',\n  },\n};\n\nconst partialDiastolic = {\n  eventId: '1602328271.2',\n  result: {\n    value: '80',\n    unit: 'mmHg',\n  },\n};\n\nconst standardInError = [\n  {\n    eventId: '1577836800',\n    ...partialStandard,\n    status: 'entered-in-error',\n  },\n  {\n    eventId: '1577836911',\n    ...partialStandard,\n  },\n];\n\nconst bloodpressureOneInError = [\n  {\n    id: '111',\n    systolic: {\n      ...partialSystolic,\n      status: 'entered-in-error',\n    },\n    diastolic: {\n      ...partialDiastolic,\n    },\n  },\n  {\n    id: '112',\n    systolic: {\n      ...partialSystolic,\n    },\n    diastolic: {\n      ...partialDiastolic,\n    },\n  },\n];\n\nconst bloodpressureBothInError = [\n  {\n    id: '211',\n    systolic: {\n      ...partialSystolic,\n      status: 'entered-in-error',\n    },\n    diastolic: {\n      ...partialDiastolic,\n      status: 'entered-in-error',\n    },\n  },\n  {\n    id: '212',\n    systolic: {\n      ...partialSystolic,\n    },\n    diastolic: {\n      ...partialDiastolic,\n    },\n  },\n];\n\nexport default () => (\n  <React.Fragment>\n    <div className={cx(['mock-flowsheet-resultcolumn', 'double-column'])}>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'with-padding'])}>\n        standard result\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'wide', 'with-padding'])}>\n      blood pressure: systolic-only\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn-cell', 'wide', 'with-padding'])}>\n        blood pressure: both systolic & diastolic\n      </div>\n    </div>\n    <div className={cx('mock-flowsheet-resultcolumn')}>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={standardInError} hideUnit />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={bloodpressureOneInError} hideUnit />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n        <FlowsheetResultCell resultDataSet={bloodpressureBothInError} hideUnit />\n      </div>\n    </div>\n  </React.Fragment>\n);\n"},3080:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=S(l(0)),s=S(l(1006)),i=S(l(2084)),a=l(1223),r=S(l(2085)),o=S(l(2086)),u=S(l(2087)),c=S(l(2088)),d=S(l(2089)),m=S(l(2090)),f=S(l(2091)),p=S(l(2092)),h=S(l(2093)),v=S(l(2094)),w=S(l(2095)),y=S(l(2096)),R=S(l(2097)),D=S(l(2098)),N=S(l(2099)),I=S(l(2100)),C=S(l(2101)),g=S(l(2102)),E=S(l(2103)),b=S(l(2104)),k=S(l(2105));function S(e){return e&&e.__esModule?e:{default:e}}var x=function(){return n.default.createElement(s.default,{packageName:a.name,readme:i.default,srcPath:"https://github.com/cerner/terra-clinical/tree/master/packages/".concat(a.name),examples:[{title:"Flowsheet Result Cell",description:"",example:n.default.createElement(o.default,null),source:u.default},{title:"Flowsheet Result Cell with Multiple Results",example:n.default.createElement(c.default,null),source:d.default},{title:"Flowsheet Result Cell with Blood Pressure Result",example:n.default.createElement(m.default,null),source:f.default},{title:"Flowsheet Result Cell with Multiple Blood Pressure Results",example:n.default.createElement(p.default,null),source:h.default},{title:"Flowsheet Result Cell with Unverified Results",description:"",example:n.default.createElement(v.default,null),source:w.default},{title:"Flowsheet Result Cell Padding Styles",description:"",example:n.default.createElement(y.default,null),source:R.default},{title:'Flowsheet Result Cell for "Known No Result" and Blood Pressure partial "No Result"',description:"Use the 'hasResultNoData' prop to show the \"No Data\" display for the Flowsheet Result Cell. For Blood Pressure, Use either the 'resultNoData' property name or ' result: { value: null, }' to show the \"No Data\" display for either the Systolic or Diastolic result:",example:n.default.createElement(D.default,null),source:N.default},{title:'Displays for a full "Known Error" and for partial missing results',description:"Use the 'hasResultError' prop to show the \"Error\" display for the full Flowsheet Result Cell. Or if there is a missing part results (e.g. Systolic or Diastolic), that portion will show the error display:",example:n.default.createElement(I.default,null),source:C.default},{title:"Flowsheet Result Cell with a numeric result that overflows the container",description:'When displaying a result with an overflowed numeric value, instead of truncating the value, shows "View Results" message.',example:n.default.createElement(g.default,null),source:E.default},{title:'Uncharted Result as "Entered In Error"',description:"Display for when the result status has been set to 'entered-in-error'",example:n.default.createElement(b.default,null),source:k.default}],propsTables:[{componentName:"Flowsheet Result Cell",componentSrc:r.default}]})};t.default=x}}]);
//# sourceMappingURL=91-ae52aaa1df1c04fb4a8c.js.map