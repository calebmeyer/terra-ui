{"version":3,"sources":["webpack:///./src/terra-dev-site/guide/Internationalization/TestingComponentsWhichIncludeTranslations.f.guide.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iuBAOA,IAKMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,iDADR,iDAGA,6CAA0B,qBAAGC,WAAW,KAAQ,CAC5C,KAAQ,uBADc,QAA1B,QAE0B,qBAAGA,WAAW,KAAQ,CAC5C,KAAQ,8BADc,UAF1B,4CAKA,kDAA+B,qBAAGA,WAAW,KAAQ,CACjD,KAAQ,gDADmB,qBAA/B,mFAGA,qEACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0eAoBL,mBAAQ,CACN,GAAM,2CADR,2CAGA,+BAAY,qBAAGA,WAAW,KAAQ,CAC9B,KAAQ,gDADA,qBAAZ,sTAGA,oGAAiF,4BAAYA,WAAW,KAAvB,sBAAjF,sBACA,oDAAiC,4BAAYA,WAAW,KAAvB,sBAAjC,KACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yIAQL,6EACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mOASL,uBAAG,wBAAQA,WAAW,KAAnB,QAAH,IAAgD,oBAAIA,WAAW,KAAf,iEAAqF,4BAAYA,WAAW,MAAvB,kBAArF,oEAAqN,4BAAYA,WAAW,MAAvB,kBAArN,gGAKpDJ,EAAWK,gBAAiB","file":"431-2c8dd034a6ded657f2c2.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"testing-components-which-include-translations\"\n    }}>{`Testing Components Which Include Translations`}</h1>\n    <p>{`We recommend using `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`Jest`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://airbnb.io/enzyme/\"\n      }}>{`Enzyme`}</a>{` for writing React component unit tests.`}</p>\n    <p>{`We also recommend using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cerner/terra-enzyme-intl\"\n      }}>{`terra-enzyme-intl`}</a>{` which provides helpers for testing components that use react-intl with enzyme.`}</p>\n    <p>{`A test using terra-enzyme-intl looks like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Toggle.test.jsx\nimport React from 'react';\nimport { shallowWithIntl, mountWithIntl } from 'terra-enzyme-intl';\n\nimport Toggle from '../../src/Toggle';\n\ndescribe('<Toggle />', () => {\n  it('shallow renders Toggle component', () => {\n    const wrapper = shallowWithIntl(<Toggle />);\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('mounts a Toggle component', () => {\n    const wrapper = mountWithIntl(<Toggle />);\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"aggregating-translations-for-jest-tests\"\n    }}>{`Aggregating translations for Jest tests`}</h2>\n    <p>{`With `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cerner/terra-enzyme-intl\"\n      }}>{`terra-enzyme-intl`}</a>{`, aggregating translations for Jest tests is not necessary. The terra-enzyme-intl package will use the translation keys for the translation strings instead of the actual translations. If you want to test the actual translation string values, we recommend testing translations with a tool like webdriver.io.`}</p>\n    <p>{`However, if you require translations in your Jest tests, you can create a `}<inlineCode parentName=\"p\">{`jestglobalsetup.js`}</inlineCode>{` file in your app.`}</p>\n    <p>{`Add the following code to `}<inlineCode parentName=\"p\">{`jestglobalsetup.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const aggregateTranslations = require('terra-aggregate-translations');\n\nmodule.exports = () => {\n  aggregateTranslations();\n};\n`}</code></pre>\n    <p>{`In your app's jest config file, add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`globalSetup: './jestglobalsetup.js',\n// This allows jest to resolve files from the generated aggregated-translations in addition to node_modules\nmoduleDirectories: [\n  'aggregated-translations',\n  'node_modules',\n],\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note`}</strong>{` `}<em parentName=\"p\">{`The terra-base component uses terra-i18n which currently uses `}<inlineCode parentName=\"em\">{`require.ensure`}</inlineCode>{` to handle code splitting of translations. Jest does not support `}<inlineCode parentName=\"em\">{`require.ensure`}</inlineCode>{` out of the box. Because of this, we do not recommend using terra-base in your Jest tests.`}</em></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}