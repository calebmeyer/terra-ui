(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{2060:function(e,t,n){"use strict";n.r(t),t.default="# Terra Clinical Result Blood Pressure\n\nThe Clinical Result is a standardized view for single result values added to a Patient's Medical Chart. This is specifically for Blood Pressure Vital Sign results.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n```\n$ npm install terra-clinical-result\n```\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Component Features\n\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n* [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n\n## Usage Guide\n\nThe blood pressure result is constructed similarly to the single clinical result by providing structured object with a specific construction that follows a similar pattern to the [HL7 FHIR Observation Blood Pressure](https://www.hl7.org/fhir/observation-example-bloodpressure.html) example.\n\nAn example of a single blood pressure result value:\n```jsx\nimport React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst bloodpressureResultValue = {\n  id: '1577836800',\n  systolic: {\n    eventId: '1577836800.1',\n    result: {\n      value: '180',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n    isModified: true,\n    hasComment: true,\n    isUnverified: true,\n    conceptDisplay: 'Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n  diastolic: {\n    eventId: '1577836800.2',\n    result: {\n      value: '60',\n      unit: 'mmHg',\n    },\n    interpretation: 'low',\n    isModified: true,\n    hasComment: true,\n    isUnverified: true,\n    conceptDisplay: 'Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  }\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} hideUnit isTruncated />;\n\n```\n"},2061:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport classNames from 'classnames/bind';\nimport IconModified from 'terra-icon/lib/icon/IconModified';\nimport IconComment from 'terra-icon/lib/icon/IconComment';\nimport IconUnverified from 'terra-icon/lib/icon/IconDiamond';\nimport Observation from './common/observation/_Observation';\nimport observationPropShape from './proptypes/observationPropTypes';\nimport ResultError from './common/other/_ResultError';\nimport NoData from './common/other/_KnownNoData';\nimport { isEmpty, checkIsStatusInError, ConditionalWrapper } from './common/utils';\nimport styles from './ClinicalResult.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   *  Blood Pressure grouped result id\n   */\n  id: PropTypes.string,\n  /**\n   *  Systolic Result for blood pressure.\n   */\n  systolic: observationPropShape,\n  /**\n   *  Diastolic Result for blood pressure.\n   */\n  diastolic: observationPropShape,\n  /**\n   * Whether or not the unit of measure should be presented in a series of side-by-side columns of the same unit.\n   */\n  hideUnit: PropTypes.bool,\n  /**\n   * Whether or not the text should be truncated in display. Restricts clinical result details each to one line.\n   */\n  isTruncated: PropTypes.bool,\n  /**\n   * Whether or not there is a known error or problem when retrieving or assembling the clinical result data.\n   */\n  hasResultError: PropTypes.bool,\n  /**\n   * Whether or not the result has a value for a specific datetime.\n   */\n  hasResultNoData: PropTypes.bool,\n  /**\n   * @private\n   * Used by Flowsheet Result Cell to hide icons because it displays them in different positions.\n   */\n  hideAccessoryDisplays: PropTypes.bool,\n  /**\n   * @private\n   * The intl object to be injected for translations.\n   */\n  intl: intlShape.isRequired,\n};\n\nconst defaultProps = {\n  hideUnit: false,\n  isTruncated: false,\n  hasResultError: false,\n  hasResultNoData: false,\n  hideAccessoryDisplays: false,\n};\n\nconst createConcpetDisplays = (compareConceptDisplays) => {\n  if (compareConceptDisplays.systolic && compareConceptDisplays.diastolic) {\n    if (compareConceptDisplays.systolic === compareConceptDisplays.diastolic) {\n      return <div className={cx('concept-display')}>{compareConceptDisplays.originalSystolic}</div>;\n    }\n    return (\n      <div className={cx('concept-display')}>\n        {compareConceptDisplays.originalSystolic}\n        {' / '}\n        {compareConceptDisplays.originalDiastolic}\n      </div>\n    );\n  }\n  if (compareConceptDisplays.systolic || compareConceptDisplays.diastolic) {\n    const conceptDisplayValue = compareConceptDisplays.originalSystolic || compareConceptDisplays.originalDiastolic;\n    return <div className={cx('concept-display')}>{conceptDisplayValue}</div>;\n  }\n  return null;\n};\n\nconst createDatetimeDisplays = (compareDatetimeDisplays) => {\n  if (compareDatetimeDisplays.systolic && compareDatetimeDisplays.diastolic) {\n    if (compareDatetimeDisplays.systolic === compareDatetimeDisplays.diastolic) {\n      return <div className={cx('concept-display')}>{compareDatetimeDisplays.originalSystolic}</div>;\n    }\n    return (\n      <div className={cx('concept-display')}>\n        {compareDatetimeDisplays.originalSystolic}\n        {' / '}\n        {compareDatetimeDisplays.originalDiastolic}\n      </div>\n    );\n  }\n  if (compareDatetimeDisplays.systolic || compareDatetimeDisplays.diastolic) {\n    const conceptDisplayValue1 = compareDatetimeDisplays.originalSystolic || compareDatetimeDisplays.originalDiastolic;\n    return <div className={cx('concept-display')}>{conceptDisplayValue1}</div>;\n  }\n  return null;\n};\n\nconst ClinicalResultBloodPressure = (props) => {\n  const {\n    id,\n    systolic,\n    diastolic,\n    hideUnit,\n    isTruncated,\n    hasResultError,\n    hasResultNoData,\n    hideAccessoryDisplays,\n    intl,\n    ...customProps\n  } = props;\n\n  let clinicalResultBloodPressureDisplay = null;\n\n  if (hasResultError) {\n    clinicalResultBloodPressureDisplay = <ResultError />;\n  } else if (hasResultNoData) {\n    clinicalResultBloodPressureDisplay = <NoData />;\n  } else {\n    const compareUnits = {};\n    const compareStatusIsInError = {};\n\n    const compareConceptDisplays = {\n      originalSystolic: systolic && systolic.conceptDisplay,\n      originalDiastolic: diastolic && diastolic.conceptDisplay,\n    };\n    const compareDatetimeDisplays = {\n      originalSystolic: systolic && systolic.datetimeDisplay,\n      originalDiastolic: diastolic && diastolic.datetimeDisplay,\n    };\n\n    let iconGroupDisplayElement = null;\n\n    const noDataSystolic = (systolic && systolic.resultNoData === true);\n    if (systolic && !noDataSystolic) {\n      const {\n        result,\n        status,\n        conceptDisplay,\n        datetimeDisplay,\n      } = systolic;\n\n      if (!isEmpty(result.unit)) { compareUnits.systolic = result.unit.trim().toLowerCase(); }\n      if (!isEmpty(status)) { compareStatusIsInError.systolic = checkIsStatusInError(status); }\n      if (!isEmpty(conceptDisplay)) { compareConceptDisplays.systolic = conceptDisplay.trim().toLowerCase(); }\n      if (!isEmpty(datetimeDisplay)) { compareDatetimeDisplays.systolic = datetimeDisplay.trim().toLowerCase(); }\n    }\n\n    const noDataDiastolic = (diastolic && diastolic.resultNoData === true);\n    if (diastolic && !noDataDiastolic) {\n      const {\n        result,\n        status,\n        conceptDisplay,\n        datetimeDisplay,\n      } = diastolic;\n\n      if (!isEmpty(result.unit)) { compareUnits.diastolic = result.unit.trim().toLowerCase(); }\n      if (!isEmpty(status)) { compareStatusIsInError.diastolic = checkIsStatusInError(status); }\n      if (!isEmpty(conceptDisplay)) { compareConceptDisplays.diastolic = conceptDisplay.trim().toLowerCase(); }\n      if (!isEmpty(datetimeDisplay)) { compareDatetimeDisplays.diastolic = datetimeDisplay.trim().toLowerCase(); }\n    }\n\n    const hasModifiedIcon = (systolic && systolic.isModified) || (diastolic && diastolic.isModified);\n    const hasCommentIcon = (systolic && systolic.hasComment) || (diastolic && diastolic.hasComment);\n    const hasUnverifiedIcon = (systolic && systolic.isUnverified) || (diastolic && diastolic.isUnverified);\n    const datetimeDisplayElement = createDatetimeDisplays(compareDatetimeDisplays);\n    const conceptDisplayElement = createConcpetDisplays(compareConceptDisplays);\n\n    const decoratedResultDisplay = [];\n    if (systolic || diastolic) {\n      if (!systolic) {\n        decoratedResultDisplay.push(<ResultError key={`Error-Systolic-${id}`} />);\n      } else if (noDataSystolic) {\n        decoratedResultDisplay.push(<NoData key={`NoData-Systolic-${id}`} />);\n      } else if (systolic) {\n        const systolicDisplay = (\n          <ConditionalWrapper\n            key={`del-Systolic-${systolic.eventId}`}\n            condition={compareStatusIsInError.systolic}\n            wrapper={children => <del>{children}</del>}\n          >\n            <Observation\n              key={`Observation-Systolic-${systolic.eventId}`}\n              eventId={systolic.eventId}\n              result={systolic.result}\n              interpretation={!compareStatusIsInError.systolic ? systolic.interpretation : null}\n              isUnverified={systolic.isUnverified}\n              hideUnit={hideUnit || ((compareUnits.systolic === compareUnits.diastolic) && !compareStatusIsInError.systolic)}\n            />\n          </ConditionalWrapper>\n        );\n        decoratedResultDisplay.push(systolicDisplay);\n      }\n      decoratedResultDisplay.push(<span key={`Observation-Separator-${(systolic) ? systolic.eventId : diastolic.eventId}`} className={cx('result-display-separator')}>/</span>);\n      if (!diastolic) {\n        decoratedResultDisplay.push(<ResultError key={`Error-Diastolic-${id}`} />);\n      } else if (noDataDiastolic) {\n        decoratedResultDisplay.push(<NoData key={`NoData-Diastolic-${id}`} />);\n      } else if (diastolic) {\n        const diastolicDisplay = (\n          <ConditionalWrapper\n            key={`del-Diastolic-${diastolic.eventId}`}\n            condition={compareStatusIsInError.diastolic}\n            wrapper={children => <del>{children}</del>}\n          >\n            <Observation\n              key={`Observation-Diastolic-${diastolic.eventId}`}\n              eventId={diastolic.eventId}\n              result={diastolic.result}\n              interpretation={!compareStatusIsInError.diastolic ? diastolic.interpretation : null}\n              isUnverified={diastolic.isUnverified}\n              hideUnit={hideUnit}\n            />\n          </ConditionalWrapper>\n        );\n        decoratedResultDisplay.push(diastolicDisplay);\n      }\n\n      const modifiedIconElement = hasModifiedIcon && !hasUnverifiedIcon ? (<IconModified className={cx('icon-modified')} />) : null;\n      const commentIconElement = hasCommentIcon && !hasUnverifiedIcon ? (<IconComment className={cx('icon-comment')} />) : null;\n      const unverifiedIconElement = hasUnverifiedIcon ? (<IconUnverified className={cx('icon-unverified')} />) : null;\n      if (hasModifiedIcon || hasCommentIcon || hasUnverifiedIcon) {\n        iconGroupDisplayElement = (\n          <React.Fragment>\n            {modifiedIconElement}\n            {commentIconElement}\n            {unverifiedIconElement}\n          </React.Fragment>\n        );\n      }\n    }\n\n    const decoratedResultClassnames = cx([\n      'decorated-result-display',\n      { truncated: isTruncated },\n      { 'status-in-error': compareStatusIsInError.systolic || compareStatusIsInError.diastolic },\n    ]);\n\n    clinicalResultBloodPressureDisplay = (\n      <React.Fragment>\n        <div className={decoratedResultClassnames}>\n          <div className={cx('result-display')}>\n            {decoratedResultDisplay}\n            {isTruncated ? null : !hideAccessoryDisplays && iconGroupDisplayElement}\n          </div>\n          {isTruncated ? !hideAccessoryDisplays && iconGroupDisplayElement : null}\n        </div>\n        {!hideAccessoryDisplays && conceptDisplayElement}\n        {!hideAccessoryDisplays && datetimeDisplayElement}\n      </React.Fragment>\n    );\n  }\n\n  const clinicalResultClassnames = cx([\n    'clinical-result',\n    'blood-pressure-result',\n  ]);\n\n  return (\n    <div\n      {...customProps}\n      className={customProps.className ? `${clinicalResultClassnames} ${customProps.className}` : clinicalResultClassnames}\n    >\n      {clinicalResultBloodPressureDisplay}\n    </div>\n  );\n};\n\nClinicalResultBloodPressure.propTypes = propTypes;\nClinicalResultBloodPressure.defaultProps = defaultProps;\n\nexport default injectIntl(ClinicalResultBloodPressure);\n"},2062:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);var a={id:"111",systolic:{eventId:"111.1",result:{value:"180",unit:"mmHg"},interpretation:"critical"},diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"}}};t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,a)}},2063:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n  },\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\n"},2064:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);var a={id:"111",systolic:{eventId:"111.1",result:{value:"120",unit:"mmHg"},isModified:!1,hasComment:!0},diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"},isModified:!0,hasComment:!1}};t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,a)}},2065:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg',\n    },\n    isModified: false,\n    hasComment: true,\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n    isModified: true,\n    hasComment: false,\n  },\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\n"},2066:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var o={id:"111",systolic:{eventId:"111.1",result:{value:"120",unit:"mmHg"},isUnverified:!0},diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"},isUnverified:!0}};t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,a({},o,{hideUnit:!0}))}},2067:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg',\n    },\n    isUnverified: true,\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n    isUnverified: true,\n  },\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} hideUnit />;\n"},2068:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);var a={id:"111",systolic:{eventId:"111.1",result:{value:"120",unit:"mmHg"},conceptDisplay:"Blood Pressure Systolic",datetimeDisplay:"Nov 23, 2019 13:31:31"},diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"},conceptDisplay:"Blood Pressure Diastolic",datetimeDisplay:"Nov 23, 2019 13:31:44"}};t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,a)}},2069:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib';\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg',\n    },\n    conceptDisplay: 'Blood Pressure Systolic',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n    conceptDisplay: 'Blood Pressure Diastolic',\n    datetimeDisplay: 'Nov 23, 2019 13:31:44',\n  },\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\n"},2070:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var o={id:"111",systolic:{eventId:"111.1",result:{value:"354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856",unit:"mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg"},isModified:!0,hasComment:!0,conceptDisplay:"Blood Pressure",datetimeDisplay:"Nov 23, 2019 13:31:31"},diastolic:{eventId:"111.2",result:{value:"354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856",unit:"mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg"},isModified:!0,hasComment:!0,conceptDisplay:"Blood Pressure",datetimeDisplay:"Nov 23, 2019 13:31:31"}};t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,a({},o,{isTruncated:!0}))}},2071:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856',\n      unit: 'mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg',\n    },\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856',\n      unit: 'mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg',\n    },\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} isTruncated />;\n"},2072:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=o(n(0)),i=n(1005),l=o(n(4)),a=o(n(1018));function o(e){return e&&e.__esModule?e:{default:e}}var r=l.default.bind(a.default),u=[];u.push(s.default.createElement("div",{className:r("bottom-space")},s.default.createElement(i.ClinicalResultBloodPressure,{id:"111",systolic:{eventId:"111.1",result:{value:"180",unit:"mmHg"},interpretation:"critical"},diastolic:{eventId:"111.2",result:{value:"120",unit:"mmHg"},interpretation:"critical"}}))),u.push(s.default.createElement("div",{className:r("bottom-space")},s.default.createElement(i.ClinicalResultBloodPressure,{id:"111",systolic:{eventId:"111.1",result:{value:"140",unit:"mmHg"},interpretation:"high"},diastolic:{eventId:"111.2",result:{value:"90",unit:"mmHg"},interpretation:"high"}}))),u.push(s.default.createElement("div",{className:r("bottom-space")},s.default.createElement(i.ClinicalResultBloodPressure,{id:"111",systolic:{eventId:"111.1",result:{value:"88",unit:"mmHg"},interpretation:"low"},diastolic:{eventId:"111.2",result:{value:"60",unit:"mmHg"},interpretation:"low"}}))),u.push(s.default.createElement("div",{className:r("bottom-space")},s.default.createElement(i.ClinicalResultBloodPressure,{id:"111",systolic:{eventId:"111.1",result:{value:"100",unit:"mmHg"},interpretation:"abnormal"},diastolic:{eventId:"111.2",result:{value:"100",unit:"mmHg"},interpretation:"abnormal"}}))),u.push(s.default.createElement("div",null,s.default.createElement(i.ClinicalResultBloodPressure,{id:"111",systolic:{eventId:"111.1",result:{value:"180",unit:"mmHg"},interpretation:"critical"},diastolic:{eventId:"111.2",result:{value:"60",unit:"mmHg"},interpretation:"low"}})));t.default=function(){return u}},2073:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst setofResultValues = [];\n\nconst mixedBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '60',\n      unit: 'mmHg',\n    },\n    interpretation: 'low',\n  },\n};\n\nconst criticalBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '120',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n  },\n};\n\nconst highBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '140',\n      unit: 'mmHg',\n    },\n    interpretation: 'high',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '90',\n      unit: 'mmHg',\n    },\n    interpretation: 'high',\n  },\n};\n\nconst lowBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '88',\n      unit: 'mmHg',\n    },\n    interpretation: 'low',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '60',\n      unit: 'mmHg',\n    },\n    interpretation: 'low',\n  },\n};\n\nconst abnormalBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '100',\n      unit: 'mmHg',\n    },\n    interpretation: 'abnormal',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '100',\n      unit: 'mmHg',\n    },\n    interpretation: 'abnormal',\n  },\n};\n\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...criticalBPResultValue} /></div>);\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...highBPResultValue} /></div>);\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...lowBPResultValue} /></div>);\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...abnormalBPResultValue} /></div>);\nsetofResultValues.push(<div><ClinicalResultBloodPressure {...mixedBPResultValue} /></div>);\n\nexport default () => setofResultValues;\n"},2074:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=o(n(0)),i=n(1005),l=o(n(4)),a=o(n(1018));function o(e){return e&&e.__esModule?e:{default:e}}var r=l.default.bind(a.default),u={id:"111",systolic:{eventId:"111.1",result:{value:"180",unit:"mm Hg"},interpretation:"critical",isModified:!0,hasComment:!0,conceptDisplay:"Systolic / Diastolic Blood Pressure",datetimeDisplay:"Nov 23, 2019 13:31:31"},diastolic:{eventId:"111.2",result:{value:"60",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0,conceptDisplay:"Systolic / Diastolic Blood Pressure",datetimeDisplay:"Nov 23, 2019 13:31:31"}};t.default=function(){return s.default.createElement("div",{className:r("clinical-result-fontsize-21")},s.default.createElement(i.ClinicalResultBloodPressure,u))}},2075:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames/bind';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mm Hg',\n    },\n    interpretation: 'critical',\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Systolic / Diastolic Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '60',\n      unit: 'mmHg',\n    },\n    interpretation: 'low',\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Systolic / Diastolic Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n};\n\nexport default () => (\n  <div className={cx('clinical-result-fontsize-21')}>\n    <ClinicalResultBloodPressure {...bloodpressureResultValue} />\n  </div>\n);\n"},2076:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,{hasResultNoData:!0})}},2077:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nexport default () => <ClinicalResultBloodPressure hasResultNoData />;\n"},2078:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);var a={id:"111",systolic:{eventId:"111.1",resultNoData:!0},diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"},interpretation:"critical"}},o={id:"222",systolic:{eventId:"222.1",result:{value:"140",unit:"mmHg"},interpretation:"high"},diastolic:{eventId:"222.2",resultNoData:!0}};t.default=function(){return i.default.createElement(i.default.Fragment,null,i.default.createElement(l.ClinicalResultBloodPressure,a),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement(l.ClinicalResultBloodPressure,o))}},2079:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst partialResultValueWithNoDataPropSystolic = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    resultNoData: true,\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n  },\n};\n\nconst partialResultValueWithNoDataPropDiastolic = {\n  id: '222',\n  systolic: {\n    eventId: '222.1',\n    result: {\n      value: '140',\n      unit: 'mmHg',\n    },\n    interpretation: 'high',\n  },\n  diastolic: {\n    eventId: '222.2',\n    resultNoData: true,\n  },\n};\n\nexport default () => (\n  <React.Fragment>\n    {/* This example shows the No Data display using the `resultNoData` property name for Systolic */}\n    <ClinicalResultBloodPressure {...partialResultValueWithNoDataPropSystolic} />\n    <br />\n    <br />\n    {/* This example shows the No Data display using the `resultNoData` property name for Diastolic */}\n    <ClinicalResultBloodPressure {...partialResultValueWithNoDataPropDiastolic} />\n  </React.Fragment>\n);\n"},2080:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);var a={id:"111",diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"},interpretation:"critical"}},o={id:"222",systolic:{eventId:"222.1",result:{value:"140",unit:"mmHg"},interpretation:"high"}};t.default=function(){return i.default.createElement(i.default.Fragment,null,i.default.createElement(l.ClinicalResultBloodPressure,{hasResultError:!0}),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement(l.ClinicalResultBloodPressure,a),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement(l.ClinicalResultBloodPressure,o))}},2081:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst partialResultValueWithNoSystolic = {\n  id: '111',\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n    interpretation: 'critical',\n  },\n};\n\nconst partialResultValueWithNoDiastolic = {\n  id: '222',\n  systolic: {\n    eventId: '222.1',\n    result: {\n      value: '140',\n      unit: 'mmHg',\n    },\n    interpretation: 'high',\n  },\n};\n\nexport default () => (\n  <React.Fragment>\n    {/* This example shows how to use the `hasResultError` prop */}\n    <ClinicalResultBloodPressure hasResultError />\n    <br />\n    <br />\n    {/* This example shows the error display when the Systolic property name is not present */}\n    <ClinicalResultBloodPressure {...partialResultValueWithNoSystolic} />\n    <br />\n    <br />\n    {/* This example shows the error display when the Diastolic property name is not present */}\n    <ClinicalResultBloodPressure {...partialResultValueWithNoDiastolic} />\n  </React.Fragment>\n);\n"},2082:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s,i=(s=n(0))&&s.__esModule?s:{default:s},l=n(1005);var a={id:"111",systolic:{eventId:"111.1",result:{value:"120",unit:"mmHg"},status:"entered-in-error",interpretation:"critical",hasComment:!0,conceptDisplay:"Blood Pressure (Supine)",datetimeDisplay:"Nov 23, 2019 13:31:31"},diastolic:{eventId:"111.2",result:{value:"80",unit:"mmHg"},status:"entered-in-error",interpretation:"low",hasComment:!1,conceptDisplay:"Blood Pressure (Supine)",datetimeDisplay:"Nov 23, 2019 13:31:31"}};t.default=function(){return i.default.createElement(l.ClinicalResultBloodPressure,a)}},2083:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\n\nconst bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg',\n    },\n    status: 'entered-in-error',\n    interpretation: 'critical',\n    hasComment: true,\n    conceptDisplay: 'Blood Pressure (Supine)',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg',\n    },\n    status: 'entered-in-error',\n    interpretation: 'low',\n    hasComment: false,\n    conceptDisplay: 'Blood Pressure (Supine)',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\n  },\n};\n\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\n"},3079:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=S(n(0)),i=S(n(1006)),l=S(n(2060)),a=n(1223),o=S(n(2061)),r=S(n(2062)),u=S(n(2063)),c=S(n(2064)),d=S(n(2065)),m=S(n(2066)),p=S(n(2067)),f=S(n(2068)),y=S(n(2069)),v=S(n(2070)),h=S(n(2071)),g=S(n(2072)),D=S(n(2073)),R=S(n(2074)),H=S(n(2075)),b=S(n(2076)),P=S(n(2077)),C=S(n(2078)),I=S(n(2079)),E=S(n(2080)),B=S(n(2081)),N=S(n(2082)),x=S(n(2083));function S(e){return e&&e.__esModule?e:{default:e}}var w=function(){return s.default.createElement(i.default,{packageName:a.name,readme:l.default,srcPath:"https://github.com/cerner/terra-clinical/tree/master/packages/".concat(a.name),examples:[{title:"Default Blood Pressure Clinical Result",example:s.default.createElement(r.default,null),source:u.default},{title:"Modified Blood Pressure Clinical Result with Comments",example:s.default.createElement(c.default,null),source:d.default},{title:"Unverified Blood Pressure Result with Hide Unit of Measure",example:s.default.createElement(m.default,null),source:p.default},{title:"Clinical Blood Pressure Result with additional displays",example:s.default.createElement(f.default,null),source:y.default},{title:"Blood Pressure Clinical Results with Intrepretation",example:s.default.createElement(g.default,null),source:D.default},{title:"Changing the Blood Pressure Clinical Result Size",example:s.default.createElement(R.default,null),source:H.default},{title:"Truncated Blood Pressure Clinical Result",example:s.default.createElement(v.default,null),source:h.default},{title:'Display for "Known No Result"',description:"Use the 'hasResultNoData' prop to show the \"No Data\" display for the Blood Pressure Clinical Result:",example:s.default.createElement(b.default,null),source:P.default},{title:'Display for a Partial "No Result"',description:"Use the 'resultNoData' property name to show the \"No Data\" display for either the Systolic or Diastolic result:",example:s.default.createElement(C.default,null),source:I.default},{title:'Displays for a full "Known Error" and for partial missing results',description:"Use the 'hasResultError' prop to show the \"Error\" display for the full Blood Pressure result. Or if there is a missing Systolic or Diastolic result, that portion will show the error display:",example:s.default.createElement(E.default,null),source:B.default},{title:'Uncharted Result as "Entered In Error"',description:"Display for when the result status has been set to 'entered-in-error'",example:s.default.createElement(N.default,null),source:x.default}],propsTables:[{componentName:"Clinical-Result-Blood-Pressure Props",componentSrc:o.default}]})};t.default=w}}]);
//# sourceMappingURL=82-65d0e88bf0e00d47a0e8.js.map