{"version":3,"sources":["webpack:///./node_modules/terra-table/lib/terra-dev-site/doc/guides/SortedTable.js","webpack:///./node_modules/terra-table/lib/terra-dev-site/doc/guides/mock-data/mock-sort.js","webpack:///./node_modules/terra-table/lib/terra-dev-site/doc/table/guides.5/SortedTable.5.doc.mdx"],"names":["Object","defineProperty","exports","value","default","_default","key","cells","title","layoutProps","MDXContent","components","props","isMDXComponent","description","isExpanded","example","exampleSrc","mdxType","parentName"],"mappings":"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","file":"393-882384946c59d18b6589.js","sourcesContent":["import React from 'react';\nimport Example from '/home/travis/build/cerner/terra-ui/node_modules/terra-table/lib/terra-dev-site/doc/guides/SortedTable.js';\nimport Code from '/home/travis/build/cerner/terra-ui/node_modules/terra-table/lib/terra-dev-site/doc/guides/SortedTable.js?dev-site-codeblock';\nimport ExampleTemplate from 'terra-dev-site/lib/loader-components/_ExampleTemplate';\n\nexport default ({ title, description, isExpanded }) => (\n      <ExampleTemplate\n        title={ title || 'Sorted Table'}\n        description={description}\n        example={<Example />}\n        exampleSrc={<Code />}\n        isExpanded={isExpanded}\n      />\n    );","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar mockData = [{\n  key: 'unique-0',\n  cells: [{\n    key: 'unique-0-0',\n    title: 'Pancakes'\n  }, {\n    key: 'unique-0-1',\n    title: 'Dogs'\n  }, {\n    key: 'unique-0-2',\n    title: 'Forks'\n  }]\n}, {\n  key: 'unique-1',\n  cells: [{\n    key: 'unique-1-0',\n    title: 'Bacon'\n  }, {\n    key: 'unique-1-1',\n    title: 'Mice'\n  }, {\n    key: 'unique-1-2',\n    title: 'Knives'\n  }]\n}, {\n  key: 'unique-2',\n  cells: [{\n    key: 'unique-2-0',\n    title: 'Waffles'\n  }, {\n    key: 'unique-2-1',\n    title: 'Cats'\n  }, {\n    key: 'unique-2-2',\n    title: 'Chopsticks'\n  }]\n}, {\n  key: 'unique-3',\n  cells: [{\n    key: 'unique-3-0',\n    title: 'Fruit'\n  }, {\n    key: 'unique-3-1',\n    title: 'Sheep'\n  }, {\n    key: 'unique-3-2',\n    title: 'Spoons'\n  }]\n}, {\n  key: 'unique-4',\n  cells: [{\n    key: 'unique-4-0',\n    title: 'Eggs'\n  }, {\n    key: 'unique-4-1',\n    title: 'Pigs'\n  }, {\n    key: 'unique-4-2',\n    title: 'Sporks'\n  }]\n}];\nvar _default = mockData;\nexports.default = _default;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport SortedTable from 'terra-table/lib/terra-dev-site/doc/guides/SortedTable?dev-site-example';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"terra-table---implementing-a-sorted-table\"\n    }}>{`Terra Table - Implementing a Sorted Table`}</h1>\n    <p>{`As table cell content is dynamic and the types of sorting can vary, consumers need to handle the state of their own sorting. The following guide lays out an example of managing sorting and state within a table implementation. There are further optimizations that can be made given an individual implementation of a data set, but this should serve as a framework for that.`}</p>\n    <h2 {...{\n      \"id\": \"state-management\"\n    }}>{`State Management`}</h2>\n    <p>{`The state of the sort column needs to be managed for the table in a HOC. In this example we are going to be an object containing a unique key for the column and current sort direction.`}</p>\n    <p>{` First defaulting our state to sorting the first column.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const [sortColumn, setSortColumn] = useState({ key: columnKeys[0], sortDesc: false });\n`}</code></pre>\n    <p>{`Next creating an event handler callback method to pass to the table row's `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` prop. The `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` will return the metaData prop passed it each header cell.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+  const handleSortClick = (event, metaData) => {\n\n+  }\n`}</code></pre>\n    <p>{`As a precaution we can prevent default on the event, in case the table has an ancestor with a listener. This also prevents the browser from auto page scrolling when we are intending to make a selection with the space bar.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const handleSortClick = (event, metaData) => {\n+   event.preventDefault();\n  }\n`}</code></pre>\n    <p>{`In this example only one column will be sorted upon, so we'll need to keep track of which column was selected and the current state of sorting for the column. 3 states of column state will be handled, unsorted, sort ascending, and sort descending. A key was sent with the metaData, but an index could have also been used in an implementation where there is no possibility of the columns being rearranged.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const handleSortClick = (event, metaData) => {\n    event.preventDefault();\n+   if (sortColumn.key !== metaData.key) {\n+     setSortColumn({ key: metaData.key, sortDesc: false });\n+   } else {\n+     setSortColumn({ key: metaData.key, sortDesc: !sortColumn.sortDesc });\n+   }\n  };\n`}</code></pre>\n    <p>{`Settting state will trigger another render. So in the render method we need generate our head cells with the updated sort props. Each header cell while need a unique key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const createHeaderCell = (key, title) => (\n+   {\n+     key,\n+     id: \\`header-\\${key}\\`,\n+     children: title,\n+   }\n+ );\n`}</code></pre>\n    <p>{`Next we need to set up our metaData object with our key value, and attach the `}<inlineCode parentName=\"p\">{`onSortAction`}</inlineCode>{` to our handler.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const createHeaderCell = (key, title) => (\n    {\n      key,\n      id: \\`header-\\${key}\\`,\n+     metaData: { key },\n+     onSortAction: handleSortClick,\n      children: title,\n    }\n  );\n`}</code></pre>\n    <p>{`Last we need to check if the header cell matches the sortColumn.key in state. The `}<inlineCode parentName=\"p\">{`isSortActive`}</inlineCode>{` prop dictates the visual presence of sorting.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const createHeaderCell = (key, title) => (\n    {\n      key,\n      id: \\`header-\\${key}\\`,\n      metaData: { key },\n      onSortAction: handleSortClick,\n+     isSortDesc: sortColumn.key === key ? sortColumn.sortDesc : false,\n+     isSortActive: sortColumn.key === key,\n      children: title,\n    }\n  );\n`}</code></pre>\n    <p>{`In this example a simple object sort parses the data, followed by a check for reversal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const sortData = (data, sortColumn) => {\n+   if (!sortColumn) {\n+     return data;\n+   }\n+\n+   const dataCopy = Object.assign([], data);\n+   dataCopy.sort((a, b) => {\n+    const x = a.cells[columns.indexOf(sortColumn.key)].title.toLowerCase();\n+    const y = b.cells[columns.indexOf(sortColumn.key)].title.toLowerCase();\n+    if (x < y) { return -1; }\n+    if (x > y) { return 1; }\n+      return 0;\n+    });\n\n+   return sortColumn.sortDesc ? dataCopy.reverse() : dataCopy;\n+ };\n`}</code></pre>\n    <p>{`Next we fill in the static methods for the example table rows.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const columns = ['column-0', 'column-1', 'column-2'];\n\n+ const createCell = cell => ({ key: cell.key, children: cell.title });\n\n+ const createCellsForRow = cells => cells.map(cell => createCell(cell));\n\n+ const createRow = rowData => ({ key: rowData.key, cells: createCellsForRow(rowData.cells) });\n`}</code></pre>\n    <p>{`Then we can implement a method to loop through our data and create the table rows with our methods and call it from our render method. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const createRows = (data) => {\n+   const sortedData = sortData(data, sortColumn);\n+   return sortedData.map(childItem => createRow(childItem));\n+ };\n\n  return (\n+   <Table\n+     summaryId=\"example-sorted-table\"\n+     summary=\"This table shows an implementation of sorted table.\"\n+     numberOfColumns={3}\n+     cellPaddingStyle=\"standard\"\n+     headerData={{\n+       cells: [\n+         createHeaderCell(columnKeys[0], 'Breakfast'),\n+         createHeaderCell(columnKeys[1], 'Animals'),\n+         createHeaderCell(columnKeys[2], 'Flatware'),\n+       ],\n+     }}\n+     bodyData={[{\n+       rows: createRows(mockData),\n+     }]}\n+   />\n  );\n`}</code></pre>\n    <p>{`Using these steps we get the following example:`}</p>\n    <SortedTable mdxType=\"SortedTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}