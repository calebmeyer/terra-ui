{"version":3,"sources":["webpack:///./node_modules/terra-clinical-result/docs/ClinicalResultBloodPressure.md","webpack:///./node_modules/terra-clinical-result/src/ClinicalResultBloodPressure.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureDefault.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureDefault.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureDecorated.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureDecorated.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureUnverified.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureUnverified.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureExtraDisplays.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureExtraDisplays.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureTruncated.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureTruncated.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureInterpretation.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureInterpretation.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureChangeSize.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureChangeSize.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownNoData.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownNoData.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressurePartialNoData.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressurePartialNoData.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownErrorAndPartialError.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownErrorAndPartialError.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureStatusEnteredInError.js","webpack:///./node_modules/terra-clinical-result/src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureStatusEnteredInError.jsx","webpack:///./node_modules/terra-clinical-result/lib/terra-dev-site/doc/ClinicalResult/ClinicalResultBloodPressure.2.doc.js"],"names":["Object","defineProperty","exports","value","default","obj","_react","__esModule","_index","bloodpressureResultValue","id","systolic","eventId","result","unit","interpretation","diastolic","createElement","ClinicalResultBloodPressure","isModified","hasComment","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","isUnverified","hideUnit","_lib","conceptDisplay","datetimeDisplay","isTruncated","_interopRequireDefault","_bind","_ExamplesModule","cx","bind","setofResultValues","push","className","hasResultNoData","partialResultValueWithNoDataPropSystolic","resultNoData","partialResultValueWithNoDataPropDiastolic","Fragment","partialResultValueWithNoSystolic","partialResultValueWithNoDiastolic","hasResultError","status","_terraDocTemplate","_ClinicalResultBloodPressure","_package","_ClinicalResultBloodPressure2","_ClinicalResultBloodPressureDefault","_ClinicalResultBloodPressureDefault2","_ClinicalResultBloodPressureDecorated","_ClinicalResultBloodPressureDecorated2","_ClinicalResultBloodPressureUnverified","_ClinicalResultBloodPressureUnverified2","_ClinicalResultBloodPressureExtraDisplays","_ClinicalResultBloodPressureExtraDisplays2","_ClinicalResultBloodPressureTruncated","_ClinicalResultBloodPressureTruncated2","_ClinicalResultBloodPressureInterpretation","_ClinicalResultBloodPressureInterpretation2","_ClinicalResultBloodPressureChangeSize","_ClinicalResultBloodPressureChangeSize2","_ClinicalResultBloodPressureKnownNoData","_ClinicalResultBloodPressureKnownNoData2","_ClinicalResultBloodPressurePartialNoData","_ClinicalResultBloodPressurePartialNoData2","_ClinicalResultBloodPressureKnownErrorAndPartialError","_ClinicalResultBloodPressureKnownErrorAndPartialError2","_ClinicalResultBloodPressureStatusEnteredInError","_ClinicalResultBloodPressureStatusEnteredInError2","_default","packageName","name","readme","srcPath","concat","examples","title","example","description","propsTables","componentName","componentSrc"],"mappings":"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","file":"82-65d0e88bf0e00d47a0e8.js","sourcesContent":["export default \"# Terra Clinical Result Blood Pressure\\n\\nThe Clinical Result is a standardized view for single result values added to a Patient's Medical Chart. This is specifically for Blood Pressure Vital Sign results.\\n\\n## Getting Started\\n\\n- Install with [npmjs](https://www.npmjs.com):\\n```\\n$ npm install terra-clinical-result\\n```\\n\\n<!-- AUTO-GENERATED-CONTENT:START Peer Dependencies -->\\n<!-- AUTO-GENERATED-CONTENT:END -->\\n\\n## Component Features\\n\\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\\n* [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\\n\\n## Usage Guide\\n\\nThe blood pressure result is constructed similarly to the single clinical result by providing structured object with a specific construction that follows a similar pattern to the [HL7 FHIR Observation Blood Pressure](https://www.hl7.org/fhir/observation-example-bloodpressure.html) example.\\n\\nAn example of a single blood pressure result value:\\n```jsx\\nimport React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst bloodpressureResultValue = {\\n  id: '1577836800',\\n  systolic: {\\n    eventId: '1577836800.1',\\n    result: {\\n      value: '180',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n    isModified: true,\\n    hasComment: true,\\n    isUnverified: true,\\n    conceptDisplay: 'Blood Pressure',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n  diastolic: {\\n    eventId: '1577836800.2',\\n    result: {\\n      value: '60',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'low',\\n    isModified: true,\\n    hasComment: true,\\n    isUnverified: true,\\n    conceptDisplay: 'Blood Pressure',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  }\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} hideUnit isTruncated />;\\n\\n```\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport { injectIntl, intlShape } from 'react-intl';\\nimport classNames from 'classnames/bind';\\nimport IconModified from 'terra-icon/lib/icon/IconModified';\\nimport IconComment from 'terra-icon/lib/icon/IconComment';\\nimport IconUnverified from 'terra-icon/lib/icon/IconDiamond';\\nimport Observation from './common/observation/_Observation';\\nimport observationPropShape from './proptypes/observationPropTypes';\\nimport ResultError from './common/other/_ResultError';\\nimport NoData from './common/other/_KnownNoData';\\nimport { isEmpty, checkIsStatusInError, ConditionalWrapper } from './common/utils';\\nimport styles from './ClinicalResult.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   *  Blood Pressure grouped result id\\n   */\\n  id: PropTypes.string,\\n  /**\\n   *  Systolic Result for blood pressure.\\n   */\\n  systolic: observationPropShape,\\n  /**\\n   *  Diastolic Result for blood pressure.\\n   */\\n  diastolic: observationPropShape,\\n  /**\\n   * Whether or not the unit of measure should be presented in a series of side-by-side columns of the same unit.\\n   */\\n  hideUnit: PropTypes.bool,\\n  /**\\n   * Whether or not the text should be truncated in display. Restricts clinical result details each to one line.\\n   */\\n  isTruncated: PropTypes.bool,\\n  /**\\n   * Whether or not there is a known error or problem when retrieving or assembling the clinical result data.\\n   */\\n  hasResultError: PropTypes.bool,\\n  /**\\n   * Whether or not the result has a value for a specific datetime.\\n   */\\n  hasResultNoData: PropTypes.bool,\\n  /**\\n   * @private\\n   * Used by Flowsheet Result Cell to hide icons because it displays them in different positions.\\n   */\\n  hideAccessoryDisplays: PropTypes.bool,\\n  /**\\n   * @private\\n   * The intl object to be injected for translations.\\n   */\\n  intl: intlShape.isRequired,\\n};\\n\\nconst defaultProps = {\\n  hideUnit: false,\\n  isTruncated: false,\\n  hasResultError: false,\\n  hasResultNoData: false,\\n  hideAccessoryDisplays: false,\\n};\\n\\nconst createConcpetDisplays = (compareConceptDisplays) => {\\n  if (compareConceptDisplays.systolic && compareConceptDisplays.diastolic) {\\n    if (compareConceptDisplays.systolic === compareConceptDisplays.diastolic) {\\n      return <div className={cx('concept-display')}>{compareConceptDisplays.originalSystolic}</div>;\\n    }\\n    return (\\n      <div className={cx('concept-display')}>\\n        {compareConceptDisplays.originalSystolic}\\n        {' / '}\\n        {compareConceptDisplays.originalDiastolic}\\n      </div>\\n    );\\n  }\\n  if (compareConceptDisplays.systolic || compareConceptDisplays.diastolic) {\\n    const conceptDisplayValue = compareConceptDisplays.originalSystolic || compareConceptDisplays.originalDiastolic;\\n    return <div className={cx('concept-display')}>{conceptDisplayValue}</div>;\\n  }\\n  return null;\\n};\\n\\nconst createDatetimeDisplays = (compareDatetimeDisplays) => {\\n  if (compareDatetimeDisplays.systolic && compareDatetimeDisplays.diastolic) {\\n    if (compareDatetimeDisplays.systolic === compareDatetimeDisplays.diastolic) {\\n      return <div className={cx('concept-display')}>{compareDatetimeDisplays.originalSystolic}</div>;\\n    }\\n    return (\\n      <div className={cx('concept-display')}>\\n        {compareDatetimeDisplays.originalSystolic}\\n        {' / '}\\n        {compareDatetimeDisplays.originalDiastolic}\\n      </div>\\n    );\\n  }\\n  if (compareDatetimeDisplays.systolic || compareDatetimeDisplays.diastolic) {\\n    const conceptDisplayValue1 = compareDatetimeDisplays.originalSystolic || compareDatetimeDisplays.originalDiastolic;\\n    return <div className={cx('concept-display')}>{conceptDisplayValue1}</div>;\\n  }\\n  return null;\\n};\\n\\nconst ClinicalResultBloodPressure = (props) => {\\n  const {\\n    id,\\n    systolic,\\n    diastolic,\\n    hideUnit,\\n    isTruncated,\\n    hasResultError,\\n    hasResultNoData,\\n    hideAccessoryDisplays,\\n    intl,\\n    ...customProps\\n  } = props;\\n\\n  let clinicalResultBloodPressureDisplay = null;\\n\\n  if (hasResultError) {\\n    clinicalResultBloodPressureDisplay = <ResultError />;\\n  } else if (hasResultNoData) {\\n    clinicalResultBloodPressureDisplay = <NoData />;\\n  } else {\\n    const compareUnits = {};\\n    const compareStatusIsInError = {};\\n\\n    const compareConceptDisplays = {\\n      originalSystolic: systolic && systolic.conceptDisplay,\\n      originalDiastolic: diastolic && diastolic.conceptDisplay,\\n    };\\n    const compareDatetimeDisplays = {\\n      originalSystolic: systolic && systolic.datetimeDisplay,\\n      originalDiastolic: diastolic && diastolic.datetimeDisplay,\\n    };\\n\\n    let iconGroupDisplayElement = null;\\n\\n    const noDataSystolic = (systolic && systolic.resultNoData === true);\\n    if (systolic && !noDataSystolic) {\\n      const {\\n        result,\\n        status,\\n        conceptDisplay,\\n        datetimeDisplay,\\n      } = systolic;\\n\\n      if (!isEmpty(result.unit)) { compareUnits.systolic = result.unit.trim().toLowerCase(); }\\n      if (!isEmpty(status)) { compareStatusIsInError.systolic = checkIsStatusInError(status); }\\n      if (!isEmpty(conceptDisplay)) { compareConceptDisplays.systolic = conceptDisplay.trim().toLowerCase(); }\\n      if (!isEmpty(datetimeDisplay)) { compareDatetimeDisplays.systolic = datetimeDisplay.trim().toLowerCase(); }\\n    }\\n\\n    const noDataDiastolic = (diastolic && diastolic.resultNoData === true);\\n    if (diastolic && !noDataDiastolic) {\\n      const {\\n        result,\\n        status,\\n        conceptDisplay,\\n        datetimeDisplay,\\n      } = diastolic;\\n\\n      if (!isEmpty(result.unit)) { compareUnits.diastolic = result.unit.trim().toLowerCase(); }\\n      if (!isEmpty(status)) { compareStatusIsInError.diastolic = checkIsStatusInError(status); }\\n      if (!isEmpty(conceptDisplay)) { compareConceptDisplays.diastolic = conceptDisplay.trim().toLowerCase(); }\\n      if (!isEmpty(datetimeDisplay)) { compareDatetimeDisplays.diastolic = datetimeDisplay.trim().toLowerCase(); }\\n    }\\n\\n    const hasModifiedIcon = (systolic && systolic.isModified) || (diastolic && diastolic.isModified);\\n    const hasCommentIcon = (systolic && systolic.hasComment) || (diastolic && diastolic.hasComment);\\n    const hasUnverifiedIcon = (systolic && systolic.isUnverified) || (diastolic && diastolic.isUnverified);\\n    const datetimeDisplayElement = createDatetimeDisplays(compareDatetimeDisplays);\\n    const conceptDisplayElement = createConcpetDisplays(compareConceptDisplays);\\n\\n    const decoratedResultDisplay = [];\\n    if (systolic || diastolic) {\\n      if (!systolic) {\\n        decoratedResultDisplay.push(<ResultError key={`Error-Systolic-${id}`} />);\\n      } else if (noDataSystolic) {\\n        decoratedResultDisplay.push(<NoData key={`NoData-Systolic-${id}`} />);\\n      } else if (systolic) {\\n        const systolicDisplay = (\\n          <ConditionalWrapper\\n            key={`del-Systolic-${systolic.eventId}`}\\n            condition={compareStatusIsInError.systolic}\\n            wrapper={children => <del>{children}</del>}\\n          >\\n            <Observation\\n              key={`Observation-Systolic-${systolic.eventId}`}\\n              eventId={systolic.eventId}\\n              result={systolic.result}\\n              interpretation={!compareStatusIsInError.systolic ? systolic.interpretation : null}\\n              isUnverified={systolic.isUnverified}\\n              hideUnit={hideUnit || ((compareUnits.systolic === compareUnits.diastolic) && !compareStatusIsInError.systolic)}\\n            />\\n          </ConditionalWrapper>\\n        );\\n        decoratedResultDisplay.push(systolicDisplay);\\n      }\\n      decoratedResultDisplay.push(<span key={`Observation-Separator-${(systolic) ? systolic.eventId : diastolic.eventId}`} className={cx('result-display-separator')}>/</span>);\\n      if (!diastolic) {\\n        decoratedResultDisplay.push(<ResultError key={`Error-Diastolic-${id}`} />);\\n      } else if (noDataDiastolic) {\\n        decoratedResultDisplay.push(<NoData key={`NoData-Diastolic-${id}`} />);\\n      } else if (diastolic) {\\n        const diastolicDisplay = (\\n          <ConditionalWrapper\\n            key={`del-Diastolic-${diastolic.eventId}`}\\n            condition={compareStatusIsInError.diastolic}\\n            wrapper={children => <del>{children}</del>}\\n          >\\n            <Observation\\n              key={`Observation-Diastolic-${diastolic.eventId}`}\\n              eventId={diastolic.eventId}\\n              result={diastolic.result}\\n              interpretation={!compareStatusIsInError.diastolic ? diastolic.interpretation : null}\\n              isUnverified={diastolic.isUnverified}\\n              hideUnit={hideUnit}\\n            />\\n          </ConditionalWrapper>\\n        );\\n        decoratedResultDisplay.push(diastolicDisplay);\\n      }\\n\\n      const modifiedIconElement = hasModifiedIcon && !hasUnverifiedIcon ? (<IconModified className={cx('icon-modified')} />) : null;\\n      const commentIconElement = hasCommentIcon && !hasUnverifiedIcon ? (<IconComment className={cx('icon-comment')} />) : null;\\n      const unverifiedIconElement = hasUnverifiedIcon ? (<IconUnverified className={cx('icon-unverified')} />) : null;\\n      if (hasModifiedIcon || hasCommentIcon || hasUnverifiedIcon) {\\n        iconGroupDisplayElement = (\\n          <React.Fragment>\\n            {modifiedIconElement}\\n            {commentIconElement}\\n            {unverifiedIconElement}\\n          </React.Fragment>\\n        );\\n      }\\n    }\\n\\n    const decoratedResultClassnames = cx([\\n      'decorated-result-display',\\n      { truncated: isTruncated },\\n      { 'status-in-error': compareStatusIsInError.systolic || compareStatusIsInError.diastolic },\\n    ]);\\n\\n    clinicalResultBloodPressureDisplay = (\\n      <React.Fragment>\\n        <div className={decoratedResultClassnames}>\\n          <div className={cx('result-display')}>\\n            {decoratedResultDisplay}\\n            {isTruncated ? null : !hideAccessoryDisplays && iconGroupDisplayElement}\\n          </div>\\n          {isTruncated ? !hideAccessoryDisplays && iconGroupDisplayElement : null}\\n        </div>\\n        {!hideAccessoryDisplays && conceptDisplayElement}\\n        {!hideAccessoryDisplays && datetimeDisplayElement}\\n      </React.Fragment>\\n    );\\n  }\\n\\n  const clinicalResultClassnames = cx([\\n    'clinical-result',\\n    'blood-pressure-result',\\n  ]);\\n\\n  return (\\n    <div\\n      {...customProps}\\n      className={customProps.className ? `${clinicalResultClassnames} ${customProps.className}` : clinicalResultClassnames}\\n    >\\n      {clinicalResultBloodPressureDisplay}\\n    </div>\\n  );\\n};\\n\\nClinicalResultBloodPressure.propTypes = propTypes;\\nClinicalResultBloodPressure.defaultProps = defaultProps;\\n\\nexport default injectIntl(ClinicalResultBloodPressure);\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mmHg'\n    },\n    interpretation: 'critical'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    }\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_index.ClinicalResultBloodPressure, bloodpressureResultValue);\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '180',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n  },\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg'\n    },\n    isModified: false,\n    hasComment: true\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    },\n    isModified: true,\n    hasComment: false\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_index.ClinicalResultBloodPressure, bloodpressureResultValue);\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '120',\\n      unit: 'mmHg',\\n    },\\n    isModified: false,\\n    hasComment: true,\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n    isModified: true,\\n    hasComment: false,\\n  },\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg'\n    },\n    isUnverified: true\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    },\n    isUnverified: true\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_index.ClinicalResultBloodPressure, _extends({}, bloodpressureResultValue, {\n    hideUnit: true\n  }));\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '120',\\n      unit: 'mmHg',\\n    },\\n    isUnverified: true,\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n    isUnverified: true,\\n  },\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} hideUnit />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lib = require(\"terra-clinical-result/lib\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg'\n    },\n    conceptDisplay: 'Blood Pressure Systolic',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    },\n    conceptDisplay: 'Blood Pressure Diastolic',\n    datetimeDisplay: 'Nov 23, 2019 13:31:44'\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_lib.ClinicalResultBloodPressure, bloodpressureResultValue);\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib';\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '120',\\n      unit: 'mmHg',\\n    },\\n    conceptDisplay: 'Blood Pressure Systolic',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n    conceptDisplay: 'Blood Pressure Diastolic',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:44',\\n  },\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856',\n      unit: 'mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg'\n    },\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856',\n      unit: 'mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg'\n    },\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_index.ClinicalResultBloodPressure, _extends({}, bloodpressureResultValue, {\n    isTruncated: true\n  }));\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856',\\n      unit: 'mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg',\\n    },\\n    isModified: true,\\n    hasComment: true,\\n    conceptDisplay: 'Blood Pressure',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '354.23377777758678567867856785687678567856767868678567856785678567856785678567857856785678567856785678567856785678578567856',\\n      unit: 'mmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHgmmHg',\\n    },\\n    isModified: true,\\n    hasComment: true,\\n    conceptDisplay: 'Blood Pressure',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} isTruncated />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _ExamplesModule = _interopRequireDefault(require(\"../Examples.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_ExamplesModule.default);\n\nvar setofResultValues = [];\nvar mixedBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mmHg'\n    },\n    interpretation: 'critical'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '60',\n      unit: 'mmHg'\n    },\n    interpretation: 'low'\n  }\n};\nvar criticalBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mmHg'\n    },\n    interpretation: 'critical'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '120',\n      unit: 'mmHg'\n    },\n    interpretation: 'critical'\n  }\n};\nvar highBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '140',\n      unit: 'mmHg'\n    },\n    interpretation: 'high'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '90',\n      unit: 'mmHg'\n    },\n    interpretation: 'high'\n  }\n};\nvar lowBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '88',\n      unit: 'mmHg'\n    },\n    interpretation: 'low'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '60',\n      unit: 'mmHg'\n    },\n    interpretation: 'low'\n  }\n};\nvar abnormalBPResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '100',\n      unit: 'mmHg'\n    },\n    interpretation: 'abnormal'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '100',\n      unit: 'mmHg'\n    },\n    interpretation: 'abnormal'\n  }\n};\nsetofResultValues.push(_react.default.createElement(\"div\", {\n  className: cx('bottom-space')\n}, _react.default.createElement(_index.ClinicalResultBloodPressure, criticalBPResultValue)));\nsetofResultValues.push(_react.default.createElement(\"div\", {\n  className: cx('bottom-space')\n}, _react.default.createElement(_index.ClinicalResultBloodPressure, highBPResultValue)));\nsetofResultValues.push(_react.default.createElement(\"div\", {\n  className: cx('bottom-space')\n}, _react.default.createElement(_index.ClinicalResultBloodPressure, lowBPResultValue)));\nsetofResultValues.push(_react.default.createElement(\"div\", {\n  className: cx('bottom-space')\n}, _react.default.createElement(_index.ClinicalResultBloodPressure, abnormalBPResultValue)));\nsetofResultValues.push(_react.default.createElement(\"div\", null, _react.default.createElement(_index.ClinicalResultBloodPressure, mixedBPResultValue)));\n\nvar _default = function _default() {\n  return setofResultValues;\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\nimport classNames from 'classnames/bind';\\nimport styles from '../Examples.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst setofResultValues = [];\\n\\nconst mixedBPResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '180',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '60',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'low',\\n  },\\n};\\n\\nconst criticalBPResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '180',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '120',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n  },\\n};\\n\\nconst highBPResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '140',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'high',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '90',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'high',\\n  },\\n};\\n\\nconst lowBPResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '88',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'low',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '60',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'low',\\n  },\\n};\\n\\nconst abnormalBPResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '100',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'abnormal',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '100',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'abnormal',\\n  },\\n};\\n\\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...criticalBPResultValue} /></div>);\\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...highBPResultValue} /></div>);\\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...lowBPResultValue} /></div>);\\nsetofResultValues.push(<div className={cx('bottom-space')}><ClinicalResultBloodPressure {...abnormalBPResultValue} /></div>);\\nsetofResultValues.push(<div><ClinicalResultBloodPressure {...mixedBPResultValue} /></div>);\\n\\nexport default () => setofResultValues;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _ExamplesModule = _interopRequireDefault(require(\"../Examples.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_ExamplesModule.default);\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '180',\n      unit: 'mm Hg'\n    },\n    interpretation: 'critical',\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Systolic / Diastolic Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '60',\n      unit: 'mmHg'\n    },\n    interpretation: 'low',\n    isModified: true,\n    hasComment: true,\n    conceptDisplay: 'Systolic / Diastolic Blood Pressure',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(\"div\", {\n    className: cx('clinical-result-fontsize-21')\n  }, _react.default.createElement(_index.ClinicalResultBloodPressure, bloodpressureResultValue));\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\nimport classNames from 'classnames/bind';\\nimport styles from '../Examples.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '180',\\n      unit: 'mm Hg',\\n    },\\n    interpretation: 'critical',\\n    isModified: true,\\n    hasComment: true,\\n    conceptDisplay: 'Systolic / Diastolic Blood Pressure',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '60',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'low',\\n    isModified: true,\\n    hasComment: true,\\n    conceptDisplay: 'Systolic / Diastolic Blood Pressure',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n};\\n\\nexport default () => (\\n  <div className={cx('clinical-result-fontsize-21')}>\\n    <ClinicalResultBloodPressure {...bloodpressureResultValue} />\\n  </div>\\n);\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = function _default() {\n  return _react.default.createElement(_index.ClinicalResultBloodPressure, {\n    hasResultNoData: true\n  });\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nexport default () => <ClinicalResultBloodPressure hasResultNoData />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar partialResultValueWithNoDataPropSystolic = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    resultNoData: true\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    },\n    interpretation: 'critical'\n  }\n};\nvar partialResultValueWithNoDataPropDiastolic = {\n  id: '222',\n  systolic: {\n    eventId: '222.1',\n    result: {\n      value: '140',\n      unit: 'mmHg'\n    },\n    interpretation: 'high'\n  },\n  diastolic: {\n    eventId: '222.2',\n    resultNoData: true\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_index.ClinicalResultBloodPressure, partialResultValueWithNoDataPropSystolic), _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null), _react.default.createElement(_index.ClinicalResultBloodPressure, partialResultValueWithNoDataPropDiastolic));\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst partialResultValueWithNoDataPropSystolic = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    resultNoData: true,\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n  },\\n};\\n\\nconst partialResultValueWithNoDataPropDiastolic = {\\n  id: '222',\\n  systolic: {\\n    eventId: '222.1',\\n    result: {\\n      value: '140',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'high',\\n  },\\n  diastolic: {\\n    eventId: '222.2',\\n    resultNoData: true,\\n  },\\n};\\n\\nexport default () => (\\n  <React.Fragment>\\n    {/* This example shows the No Data display using the `resultNoData` property name for Systolic */}\\n    <ClinicalResultBloodPressure {...partialResultValueWithNoDataPropSystolic} />\\n    <br />\\n    <br />\\n    {/* This example shows the No Data display using the `resultNoData` property name for Diastolic */}\\n    <ClinicalResultBloodPressure {...partialResultValueWithNoDataPropDiastolic} />\\n  </React.Fragment>\\n);\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar partialResultValueWithNoSystolic = {\n  id: '111',\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    },\n    interpretation: 'critical'\n  }\n};\nvar partialResultValueWithNoDiastolic = {\n  id: '222',\n  systolic: {\n    eventId: '222.1',\n    result: {\n      value: '140',\n      unit: 'mmHg'\n    },\n    interpretation: 'high'\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_index.ClinicalResultBloodPressure, {\n    hasResultError: true\n  }), _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null), _react.default.createElement(_index.ClinicalResultBloodPressure, partialResultValueWithNoSystolic), _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null), _react.default.createElement(_index.ClinicalResultBloodPressure, partialResultValueWithNoDiastolic));\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst partialResultValueWithNoSystolic = {\\n  id: '111',\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'critical',\\n  },\\n};\\n\\nconst partialResultValueWithNoDiastolic = {\\n  id: '222',\\n  systolic: {\\n    eventId: '222.1',\\n    result: {\\n      value: '140',\\n      unit: 'mmHg',\\n    },\\n    interpretation: 'high',\\n  },\\n};\\n\\nexport default () => (\\n  <React.Fragment>\\n    {/* This example shows how to use the `hasResultError` prop */}\\n    <ClinicalResultBloodPressure hasResultError />\\n    <br />\\n    <br />\\n    {/* This example shows the error display when the Systolic property name is not present */}\\n    <ClinicalResultBloodPressure {...partialResultValueWithNoSystolic} />\\n    <br />\\n    <br />\\n    {/* This example shows the error display when the Diastolic property name is not present */}\\n    <ClinicalResultBloodPressure {...partialResultValueWithNoDiastolic} />\\n  </React.Fragment>\\n);\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _index = require(\"terra-clinical-result/lib/index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bloodpressureResultValue = {\n  id: '111',\n  systolic: {\n    eventId: '111.1',\n    result: {\n      value: '120',\n      unit: 'mmHg'\n    },\n    status: 'entered-in-error',\n    interpretation: 'critical',\n    hasComment: true,\n    conceptDisplay: 'Blood Pressure (Supine)',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  },\n  diastolic: {\n    eventId: '111.2',\n    result: {\n      value: '80',\n      unit: 'mmHg'\n    },\n    status: 'entered-in-error',\n    interpretation: 'low',\n    hasComment: false,\n    conceptDisplay: 'Blood Pressure (Supine)',\n    datetimeDisplay: 'Nov 23, 2019 13:31:31'\n  }\n};\n\nvar _default = function _default() {\n  return _react.default.createElement(_index.ClinicalResultBloodPressure, bloodpressureResultValue);\n};\n\nexports.default = _default;","export default \"import React from 'react';\\nimport { ClinicalResultBloodPressure } from 'terra-clinical-result/lib/index';\\n\\nconst bloodpressureResultValue = {\\n  id: '111',\\n  systolic: {\\n    eventId: '111.1',\\n    result: {\\n      value: '120',\\n      unit: 'mmHg',\\n    },\\n    status: 'entered-in-error',\\n    interpretation: 'critical',\\n    hasComment: true,\\n    conceptDisplay: 'Blood Pressure (Supine)',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n  diastolic: {\\n    eventId: '111.2',\\n    result: {\\n      value: '80',\\n      unit: 'mmHg',\\n    },\\n    status: 'entered-in-error',\\n    interpretation: 'low',\\n    hasComment: false,\\n    conceptDisplay: 'Blood Pressure (Supine)',\\n    datetimeDisplay: 'Nov 23, 2019 13:31:31',\\n  },\\n};\\n\\nexport default () => <ClinicalResultBloodPressure {...bloodpressureResultValue} />;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _ClinicalResultBloodPressure = _interopRequireDefault(require(\"../../../../docs/ClinicalResultBloodPressure.md\"));\n\nvar _package = require(\"../../../../package.json\");\n\nvar _ClinicalResultBloodPressure2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/ClinicalResultBloodPressure\"));\n\nvar _ClinicalResultBloodPressureDefault = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureDefault\"));\n\nvar _ClinicalResultBloodPressureDefault2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureDefault.jsx\"));\n\nvar _ClinicalResultBloodPressureDecorated = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureDecorated\"));\n\nvar _ClinicalResultBloodPressureDecorated2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureDecorated.jsx\"));\n\nvar _ClinicalResultBloodPressureUnverified = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureUnverified\"));\n\nvar _ClinicalResultBloodPressureUnverified2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureUnverified.jsx\"));\n\nvar _ClinicalResultBloodPressureExtraDisplays = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureExtraDisplays\"));\n\nvar _ClinicalResultBloodPressureExtraDisplays2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureExtraDisplays.jsx\"));\n\nvar _ClinicalResultBloodPressureTruncated = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureTruncated\"));\n\nvar _ClinicalResultBloodPressureTruncated2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureTruncated.jsx\"));\n\nvar _ClinicalResultBloodPressureInterpretation = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureInterpretation\"));\n\nvar _ClinicalResultBloodPressureInterpretation2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureInterpretation.jsx\"));\n\nvar _ClinicalResultBloodPressureChangeSize = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureChangeSize\"));\n\nvar _ClinicalResultBloodPressureChangeSize2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureChangeSize.jsx\"));\n\nvar _ClinicalResultBloodPressureKnownNoData = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownNoData\"));\n\nvar _ClinicalResultBloodPressureKnownNoData2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownNoData.jsx\"));\n\nvar _ClinicalResultBloodPressurePartialNoData = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressurePartialNoData\"));\n\nvar _ClinicalResultBloodPressurePartialNoData2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressurePartialNoData.jsx\"));\n\nvar _ClinicalResultBloodPressureKnownErrorAndPartialError = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownErrorAndPartialError\"));\n\nvar _ClinicalResultBloodPressureKnownErrorAndPartialError2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureKnownErrorAndPartialError.jsx\"));\n\nvar _ClinicalResultBloodPressureStatusEnteredInError = _interopRequireDefault(require(\"../example/clinical-result-blood-pressure/ClinicalResultBloodPressureStatusEnteredInError\"));\n\nvar _ClinicalResultBloodPressureStatusEnteredInError2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/clinical-result-blood-pressure/ClinicalResultBloodPressureStatusEnteredInError.jsx\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Component Source\n// Example Files\nvar DocPage = function DocPage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: _package.name,\n    readme: _ClinicalResultBloodPressure.default,\n    srcPath: \"https://github.com/cerner/terra-clinical/tree/master/packages/\".concat(_package.name),\n    examples: [{\n      title: 'Default Blood Pressure Clinical Result',\n      example: _react.default.createElement(_ClinicalResultBloodPressureDefault.default, null),\n      source: _ClinicalResultBloodPressureDefault2.default\n    }, {\n      title: 'Modified Blood Pressure Clinical Result with Comments',\n      example: _react.default.createElement(_ClinicalResultBloodPressureDecorated.default, null),\n      source: _ClinicalResultBloodPressureDecorated2.default\n    }, {\n      title: 'Unverified Blood Pressure Result with Hide Unit of Measure',\n      example: _react.default.createElement(_ClinicalResultBloodPressureUnverified.default, null),\n      source: _ClinicalResultBloodPressureUnverified2.default\n    }, {\n      title: 'Clinical Blood Pressure Result with additional displays',\n      example: _react.default.createElement(_ClinicalResultBloodPressureExtraDisplays.default, null),\n      source: _ClinicalResultBloodPressureExtraDisplays2.default\n    }, {\n      title: 'Blood Pressure Clinical Results with Intrepretation',\n      example: _react.default.createElement(_ClinicalResultBloodPressureInterpretation.default, null),\n      source: _ClinicalResultBloodPressureInterpretation2.default\n    }, {\n      title: 'Changing the Blood Pressure Clinical Result Size',\n      example: _react.default.createElement(_ClinicalResultBloodPressureChangeSize.default, null),\n      source: _ClinicalResultBloodPressureChangeSize2.default\n    }, {\n      title: 'Truncated Blood Pressure Clinical Result',\n      example: _react.default.createElement(_ClinicalResultBloodPressureTruncated.default, null),\n      source: _ClinicalResultBloodPressureTruncated2.default\n    }, {\n      title: 'Display for \"Known No Result\"',\n      description: 'Use the \\'hasResultNoData\\' prop to show the \"No Data\" display for the Blood Pressure Clinical Result:',\n      example: _react.default.createElement(_ClinicalResultBloodPressureKnownNoData.default, null),\n      source: _ClinicalResultBloodPressureKnownNoData2.default\n    }, {\n      title: 'Display for a Partial \"No Result\"',\n      description: 'Use the \\'resultNoData\\' property name to show the \"No Data\" display for either the Systolic or Diastolic result:',\n      example: _react.default.createElement(_ClinicalResultBloodPressurePartialNoData.default, null),\n      source: _ClinicalResultBloodPressurePartialNoData2.default\n    }, {\n      title: 'Displays for a full \"Known Error\" and for partial missing results',\n      description: 'Use the \\'hasResultError\\' prop to show the \"Error\" display for the full Blood Pressure result. Or if there is a missing Systolic or Diastolic result, that portion will show the error display:',\n      example: _react.default.createElement(_ClinicalResultBloodPressureKnownErrorAndPartialError.default, null),\n      source: _ClinicalResultBloodPressureKnownErrorAndPartialError2.default\n    }, {\n      title: 'Uncharted Result as \"Entered In Error\"',\n      description: 'Display for when the result status has been set to \\'entered-in-error\\'',\n      example: _react.default.createElement(_ClinicalResultBloodPressureStatusEnteredInError.default, null),\n      source: _ClinicalResultBloodPressureStatusEnteredInError2.default\n    }],\n    propsTables: [{\n      componentName: 'Clinical-Result-Blood-Pressure Props',\n      componentSrc: _ClinicalResultBloodPressure2.default\n    }]\n  });\n};\n\nvar _default = DocPage;\nexports.default = _default;"],"sourceRoot":""}