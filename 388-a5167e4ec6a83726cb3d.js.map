{"version":3,"sources":["webpack:///./node_modules/terra-table/lib/terra-dev-site/doc/guides/mock-data/mock-select.js","webpack:///./node_modules/terra-table/lib/terra-dev-site/doc/guides/MultiSelectTable.js","webpack:///./node_modules/terra-table/lib/terra-dev-site/doc/table/guides.5/MultiSelectTable.2.doc.mdx"],"names":["Object","defineProperty","exports","value","default","_default","key","toggleText","discloseText","primaryIndex","cells","title","layoutProps","MDXContent","components","props","isMDXComponent","description","isExpanded","example","exampleSrc","mdxType","parentName"],"mappings":"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","file":"388-a5167e4ec6a83726cb3d.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar mockData = [{\n  key: 'unique-0',\n  toggleText: 'Toggle Power Row 0',\n  discloseText: 'Power Row 0 - Details',\n  primaryIndex: 1,\n  cells: [{\n    key: 'unique-0-0',\n    title: 'Item 0-0'\n  }, {\n    key: 'unique-0-1',\n    title: 'Item 0-1'\n  }, {\n    key: 'unique-0-2',\n    title: 'Item 0-2'\n  }, {\n    key: 'unique-0-3',\n    title: 'Item 0-3'\n  }]\n}, {\n  key: 'unique-1',\n  toggleText: 'Toggle Power Row 1',\n  discloseText: 'Power Row 1 - Details',\n  primaryIndex: 1,\n  cells: [{\n    key: 'unique-1-0',\n    title: 'Item 1-0'\n  }, {\n    key: 'unique-1-1',\n    title: 'Item 1-1'\n  }, {\n    key: 'unique-1-2',\n    title: 'Item 1-2'\n  }, {\n    key: 'unique-1-3',\n    title: 'Item 1-3'\n  }]\n}, {\n  key: 'unique-2',\n  toggleText: 'Toggle Power Row 2',\n  discloseText: 'Power Row 2 - Details',\n  primaryIndex: 1,\n  cells: [{\n    key: 'unique-2-0',\n    title: 'Item 2-0'\n  }, {\n    key: 'unique-2-1',\n    title: 'Item 2-1'\n  }, {\n    key: 'unique-2-2',\n    title: 'Item 2-2'\n  }, {\n    key: 'unique-2-3',\n    title: 'Item 2-3'\n  }]\n}, {\n  key: 'unique-3',\n  toggleText: 'Toggle Power Row 3',\n  discloseText: 'Power Row 3 - Details',\n  primaryIndex: 1,\n  cells: [{\n    key: 'unique-3-0',\n    title: 'Item 3-0'\n  }, {\n    key: 'unique-3-1',\n    title: 'Item 3-1'\n  }, {\n    key: 'unique-3-2',\n    title: 'Item 3-2'\n  }, {\n    key: 'unique-3-3',\n    title: 'Item 3-3'\n  }]\n}, {\n  key: 'unique-4',\n  toggleText: 'Toggle Power Row 4',\n  discloseText: 'Power Row 4 - Details',\n  primaryIndex: 1,\n  cells: [{\n    key: 'unique-4-0',\n    title: 'Item 4-0'\n  }, {\n    key: 'unique-4-1',\n    title: 'Item 4-1'\n  }, {\n    key: 'unique-4-2',\n    title: 'Item 4-2'\n  }, {\n    key: 'unique-4-3',\n    title: 'Item 4-3'\n  }]\n}];\nvar _default = mockData;\nexports.default = _default;","import React from 'react';\nimport Example from '/home/travis/build/cerner/terra-ui/node_modules/terra-table/lib/terra-dev-site/doc/guides/MultiSelectTable.js';\nimport Code from '/home/travis/build/cerner/terra-ui/node_modules/terra-table/lib/terra-dev-site/doc/guides/MultiSelectTable.js?dev-site-codeblock';\nimport ExampleTemplate from 'terra-dev-site/lib/loader-components/_ExampleTemplate';\n\nexport default ({ title, description, isExpanded }) => (\n      <ExampleTemplate\n        title={ title || 'Multi Select Table'}\n        description={description}\n        example={<Example />}\n        exampleSrc={<Code />}\n        isExpanded={isExpanded}\n      />\n    );","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport MultiSelectTable from 'terra-table/lib/terra-dev-site/doc/guides/MultiSelectTable?dev-site-example';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"terra-table---implementing-a-multi-select-table\"\n    }}>{`Terra Table - Implementing a Multi Select Table`}</h1>\n    <p>{`This guide will show you how to implement that state within a multiple row selection variant of table. To enable row selection, terra-table requires selection state to be managed by the consuming component. As a result selections from the consuming components state are applied at generation of the table rows.`}</p>\n    <h2 {...{\n      \"id\": \"state-management\"\n    }}>{`State Management`}</h2>\n    <p>{`The state of selection needs to be managed for the table in an ancestor component. In this example we are going to use a unique key, but the type of state used is open to the individual implementation.`}</p>\n    <p>{` First defaulting our state to a null value with the useState hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const [selectedKey, setSelectedKey] = useState([]);\n`}</code></pre>\n    <p>{`Next creating an event handler callback method to pass to the table row's \"onToggle\" prop. The \"onToggle\" will return the metaData prop passed it each row.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+  const handleRowToggle = (event, metaData) => {\n\n+  };\n`}</code></pre>\n    <p>{`As a precaution we can prevent default on the event, in case the table has an ancestor with a listener. This also prevents the browser from auto page scrolling when we are intending to make a selection with the space bar.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const handleRowToggle = (event, metaData) => {\n+   event.preventDefault();\n  };\n`}</code></pre>\n    <p>{`Terra Table comes with additional helpers to manage state, in this case we want to determine if the selection has selected or unselected the table row key in our state. So we use the utility method `}<inlineCode parentName=\"p\">{`toggleArrayValue`}</inlineCode>{`, which takes an array of keys and returns a new array of keys following the addition or removal of the key passed. We then set this as our state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const handleRowToggle = (event, metaData) => {\n    event.preventDefault();\n+   setSelectedKeys(Utils.toggleArrayValue(selectedKeys, metaData.key));\n  }\n`}</code></pre>\n    <p>{`Setting state will trigger another render. In the render method we need generate our table rows with the updated isSelected and isSelectable props. Each item needs a unique key, not necessarily associated to our own key, but it works as well. The table renders flat, so keys need to be unique even if they are placed within sections.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/lists-and-keys.html\"\n      }}>{`React List & Key Documentation`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+  const createRow = rowData => (\n+    {\n+      key: rowData.key,\n+      cells: createCellsForRow(rowData.cells),\n+    }\n+  );\n`}</code></pre>\n    <p>{`Next we need to set up our metaData object with our key value, and attach the \"onToggle\" to our handler.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const createRow = rowData => (\n    {\n      key: rowData.key,\n      cells: createCellsForRow(rowData.cells),\n+     toggleAction: {\n+       metaData: { key: rowData.key },\n+       onToggle: handleRowToggle,\n+     }\n    }\n  );\n`}</code></pre>\n    <p>{`Next we need to check if the row is selected. As we support IE10 & 11, we cannot use `}<inlineCode parentName=\"p\">{`contains`}</inlineCode>{`, so we use `}<inlineCode parentName=\"p\">{`indexOf`}</inlineCode>{` to determine if the key is present in our state array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const createRow = (rowData) => (\n    {\n      key: rowData.key,\n      cells: createCellsForRow(rowData.cells),\n      toggleAction: {\n        metaData: { key: rowData.key },\n        onToggle: handleRowToggle,\n+       isToggled: selectedKeys.indexOf(rowData.key) >= 0,\n+       toggleLabel: rowData.toggleText,\n      }\n    }\n  };\n`}</code></pre>\n    <p>{`For multi-select tables we need to set selectability based upon whether or not we have reached our max selection count.  Terra Table provides a helper for this, namely `}<inlineCode parentName=\"p\">{`canToggleArrayValue`}</inlineCode>{`, by providing our count, the currently selected key, and the key of the associated item.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const createRow = (rowData) => (\n    {\n      key: rowData.key,\n      cells: createCellsForRow(rowData.cells),\n      toggleAction: {\n        metaData: { key: rowData.key },\n        onToggle: handleRowToggle,\n        isToggled: selectedKeys.indexOf(rowData.key) >= 0,\n        toggleLabel: rowData.toggleText,\n      }\n+     isDisabled: !Utils.canToggleArrayValue(maxSectionCount, selectedKeys, rowData.key),\n    }\n  };\n`}</code></pre>\n    <p>{`We can then implement the unpack of our data into our row cells.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const createCell = cell => ({ key: cell.key, children: cell.title });\n\n+ const createCellsForRow = cells => cells.map(cell => createCell(cell));\n`}</code></pre>\n    <p>{`Finally we can implement a method to loop through our data and create the table row with our methods and call it from our render method.\nEnsuring that we add the appropriate aria label for multiple selections.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const createRows = data => data.map(childItem => createRow(childItem));\n\n...\n  return (\n+   <Table\n+     summaryId=\"example-multi-select\"\n+     summary=\"This table shows an implementation of multiple row selection.\"\n+     aria-multiselectable\n+     numberOfColumns={4}\n+     cellPaddingStyle=\"standard\"\n+     rowStyle=\"toggle\"\n+     headerData={{\n+       cells: [\n+         { key: 'cell-0', id: 'toggle-0', children: 'Column 0' },\n+         { key: 'cell-1', id: 'toggle-1', children: 'Column 1' },\n+         { key: 'cell-2', id: 'toggle-2', children: 'Column 2' },\n+         { key: 'cell-3', id: 'toggle-3', children: 'Column 3' },\n+       ],\n+     }}\n+     bodyData={[\n+       {\n+         rows: createRows(mockData),\n+       },\n+     ]}\n+   </Table>\n  );\n`}</code></pre>\n    <p>{`Using these steps we get the following example:`}</p>\n    <MultiSelectTable mdxType=\"MultiSelectTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}