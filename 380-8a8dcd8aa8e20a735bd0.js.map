{"version":3,"sources":["webpack:///./src/terra-dev-site/IssueForm/IssueForm.scss?6789","webpack:///./src/terra-dev-site/IssueForm/Helper.jsx","webpack:///./src/terra-dev-site/IssueForm/BugForm.jsx","webpack:///./src/terra-dev-site/IssueForm/BugTemplate.jsx","webpack:///./src/terra-dev-site/IssueForm/FeatureForm.jsx","webpack:///./src/terra-dev-site/IssueForm/FeatureTemplate.jsx","webpack:///./src/terra-dev-site/IssueForm/FormContext.jsx","webpack:///./src/terra-dev-site/IssueForm/FormMentions.jsx","webpack:///./src/terra-dev-site/IssueForm/FormTitle.jsx","webpack:///./src/terra-dev-site/IssueForm/IssueSelect.jsx","webpack:///./src/terra-dev-site/IssueForm/PackageSelect.jsx","webpack:///./src/terra-dev-site/IssueForm/Index.jsx"],"names":["module","exports","propTypes","packageList","PropTypes","arrayOf","string","setContext","func","setDescription","setEnvironment","setExpected","setIssue","setMentions","setPackage","setSolution","setSteps","setTitle","value","environmentTemplate","repoList","JSON","parse","stringify","Packages","repos","pattern","validateForm","test","BugForm","props","solution","name","validate","input","meta","label","aria-label","inputId","required","error","isInvalid","invalid","touched","help","maxWidth","onChange","event","target","inputAttrs","rows","isAutoResizable","BugTemplate","description","steps","expected","environment","context","mentions","FeatureForm","FeatureTemplate","FormContext","FormMentions","FormTitle","IssueSelect","setIssueType","Option","display","key","Object","values","map","item","concat","apply","getPackages","currentPackage","PackageSelect","defaultValue","sleep","ms","Promise","resolve","setTimeout","initialState","disclosureManager","disclosureManagerShape","isRequired","IssueForm","useState","count","setCount","isOpen","setIsOpen","issueType","selectedPackage","title","total","reduce","prev","current","length","formDidUpdate","useEffect","window","onbeforeunload","undefined","packageName","issuePreview","packageRepo","keys","find","includes","issueBody","previewBody","repo","titleTemplate","replace","handleModal","submitForm","slice","encodeTitle","encodeURIComponent","encodeBody","open","closeDisclosure","header","onBack","goBack","onClose","fill","padding","level","src","className","styles","onSubmit","subscription","submitting","pristine","render","handleSubmit","ariaLabel","onRequestClose","footer","Button","id","text","onClick","type","isDisabled","withDisclosureManager"],"mappings":"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","file":"380-8a8dcd8aa8e20a735bd0.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"center-text\":\"IssueForm__center-text___1WFao\",\"error-text\":\"IssueForm__error-text___1g8a2\",\"issue-form-select\":\"IssueForm__issue-form-select___3H-8G\",\"issue-form-select-margin\":\"IssueForm__issue-form-select-margin___3Vae9\"};","import PropTypes from 'prop-types';\nimport Packages from './Packages.json';\n\n// Prop types for all components.\nconst propTypes = {\n  /**\n   * List of packages from terra clinical, core, and framework.\n   */\n  packageList: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function that sets context state with the additional context field value.\n   */\n  setContext: PropTypes.func,\n  /**\n   * Function that sets description state with the description field value.\n   */\n  setDescription: PropTypes.func,\n  /**\n   * Function that sets environment state with the environment field value.\n   * Note: This includes the pre-fill template.\n   */\n  setEnvironment: PropTypes.func,\n  /**\n   * Function that sets expected state with the expected result field value.\n   */\n  setExpected: PropTypes.func,\n  /**\n   * Function that sets issueType state with the issue type select value.\n   */\n  setIssue: PropTypes.func,\n  /**\n   * Function that sets mentions state with the mentions field value.\n   */\n  setMentions: PropTypes.func,\n  /**\n   * Function that sets selectedPackage state with the package select value.\n   */\n  setPackage: PropTypes.func,\n  /**\n   * Function that sets solution state with the potential solution field value.\n   */\n  setSolution: PropTypes.func,\n  /**\n   * Function that sets steps state with the steps to reproduce field value.\n   */\n  setSteps: PropTypes.func,\n  /**\n   * Function that sets title state with the title field value.\n   */\n  setTitle: PropTypes.func,\n  /**\n   * Sets the value of the issue type select box to the selected issue type.\n   */\n  value: PropTypes.string,\n};\n\n// Templates used for preview, errors, and forms.\nconst disclaimerTemplate = `When logging issues to Terra UI, it is helpful to have steps to reproduce the issue using a reduced test case, or examples from <a href=\"https://engineering.cerner.com/terra-ui\" target=\"_blank\">https://engineering.cerner.com/terra-ui</a>.\n    If there are videos or screenshots that are available, those are helpful as well.\n\n**Note to Cerner associates:** If you have proprietary information, don't post it directly.  Instead post a link to a site that can be protected by the Cerner IDP (e.g. sharepoint).`;\n\nconst environmentTemplate = `* Component Version:\n* Browser Name and Version:\n* Node/npm Version [e.g. Node 8/npm 5]:\n* Webpack Version:\n* Operating System and version (desktop or mobile): `;\n\nconst titleTemplate = (title, repo, selectedPackage) => `# Repo\n${repo}\n# Title\n[${selectedPackage}] ${title}\n`;\n\n// Functions for gathering package lists and their associated repos.\nconst repoList = JSON.parse(JSON.stringify(Packages)).repos;\n\nconst getPackages = () => {\n  // eslint-disable-next-line compat/compat\n  const packageList = Object.values(repoList).map(item => item);\n  return packageList.concat.apply([], packageList);\n};\n\nconst getRepo = (packageName) => {\n  const repoName = Object.keys(repoList).find(key => repoList[key].includes(packageName));\n  return repoName;\n};\n\nconst pattern = /^[a-z0-9!\"#$%&'()*+,./:;<>=?@[\\] ^_`{|}~-]*$/im;\n// Form validation for required fields.\n/* eslint-disable compat/compat */\nconst validateForm = (value) => {\n  if (!pattern.test(value)) {\n    return 'Invalid character used';\n  }\n  if (!value) {\n    return 'Field is required.';\n  }\n  return '';\n};\n\nexport {\n  environmentTemplate,\n  disclaimerTemplate,\n  getPackages,\n  getRepo,\n  propTypes,\n  titleTemplate,\n  validateForm,\n};\n","import React from 'react';\nimport { Field } from 'react-final-form';\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\nimport { environmentTemplate, propTypes, validateForm } from './Helper';\n\nconst BugForm = (props) => {\n  const {\n    solution,\n    setDescription,\n    setEnvironment,\n    setExpected,\n    setSolution,\n    setSteps,\n  } = props;\n\n  return (\n    <div>\n      <Field\n        name=\"description\"\n        validate={validateForm}\n      >\n        {({ input, meta }) => (\n          <TextareaField\n            label=\"Issue Description\"\n            aria-label=\"A clear and concise description of what the bug is. Providing a link to a live example / minimal demo of the problem greatly helps us debug issues. Styling with Markdown is supported.\"\n            inputId=\"description\"\n            required\n            error={meta.error}\n            isInvalid={meta.invalid && meta.touched}\n            help=\"A clear and concise description of what the bug is. Providing a link to a live example / minimal demo of the problem greatly helps us debug issues. Styling with Markdown is supported.\"\n            maxWidth=\"50em\"\n            onChange={(event) => { input.onChange(event.target.value); setDescription(event.target.value); }}\n            value={input.value}\n            inputAttrs={{ ...input, rows: 4, isAutoResizable: true }}\n          />\n        )}\n      </Field>\n      <Field\n        name=\"steps\"\n        validate={validateForm}\n      >\n        {({ input, meta }) => (\n          <TextareaField\n            label=\"Steps to Reproduce\"\n            aria-label=\"Please specify the exact steps you took for this bug to occur. Provide as much detail as possible so we're able to reproduce these steps.\"\n            inputId=\"steps\"\n            required\n            error={meta.error}\n            isInvalid={meta.invalid && meta.touched}\n            help=\"Please specify the exact steps you took for this bug to occur. Provide as much detail as possible so we're able to reproduce these steps.\"\n            maxWidth=\"50em\"\n            onChange={(event) => { input.onChange(event.target.value); setSteps(event.target.value); }}\n            value={input.value}\n            inputAttrs={{ ...input, rows: 4, isAutoResizable: true }}\n          />\n        )}\n      </Field>\n      <Field\n        name=\"expected\"\n        validate={validateForm}\n      >\n        {({ input, meta }) => (\n          <TextareaField\n            label=\"Expected Behavior\"\n            aria-label=\"A clear and concise description of what you expected to happen.\"\n            inputId=\"expected\"\n            required\n            error={meta.error}\n            isInvalid={meta.invalid && meta.touched}\n            help=\"A clear and concise description of what you expected to happen.\"\n            maxWidth=\"50em\"\n            onChange={(event) => { input.onChange(event.target.value); setExpected(event.target.value); }}\n            value={input.value}\n            inputAttrs={{ ...input, rows: 2, isAutoResizable: true }}\n          />\n        )}\n      </Field>\n      <Field\n        name=\"environment\"\n        validate={validateForm}\n      >\n        {({ input, meta }) => (\n          <TextareaField\n            label=\"Environment\"\n            aria-label=\"Include as many relevant details about the environment you experienced the bug in.\"\n            inputId=\"environment\"\n            required\n            error={meta.error}\n            isInvalid={meta.invalid && meta.touched}\n            help=\"Include as many relevant details about the environment you experienced the bug in.\"\n            maxWidth=\"50em\"\n            value={!input.value ? environmentTemplate : input.value}\n            onChange={(event) => { input.onChange(event.target.value); setEnvironment(event.target.value); }}\n            inputAttrs={{ ...input }}\n          />\n        )}\n      </Field>\n      <TextareaField\n        label=\"Possible Solution\"\n        aria-label=\"If you have suggestions to fix the bug, let us know.\"\n        inputId=\"solution\"\n        help=\"If you have suggestions to fix the bug, let us know.\"\n        maxWidth=\"50em\"\n        value={solution}\n        onChange={event => setSolution(event.target.value)}\n        inputAttrs={{ rows: 2, isAutoResizable: true }}\n      />\n    </div>\n  );\n};\n\nBugForm.propTypes = propTypes;\nexport default BugForm;\n","const BugTemplate = props => `# Bug Report\n\n## Description\n${props.description}\n\n## Steps to Reproduce\n${props.steps}\n\n## Expected Behavior\n${props.expected}\n\n## Environment\n${props.environment}\n\n${props.context ? `## Additional Context / Screenshots\n${props.context}` : ''}\n\n${props.solution ? `## Possible Solution\n${props.solution}` : ''}\n\n${props.mentions ? `## Mentions\n${props.mentions}` : ''}`;\n\nexport default BugTemplate;\n","import React from 'react';\nimport { Field } from 'react-final-form';\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\nimport { propTypes, validateForm } from './Helper';\n\nconst FeatureForm = (props) => {\n  const {\n    setDescription,\n  } = props;\n\n  return (\n    <div>\n      <Field\n        name=\"description\"\n        validate={validateForm}\n      >\n        {({ input, meta }) => (\n          <TextareaField\n            label=\"Description\"\n            aria-label=\"A clear and concise description of what the feature is. Styling with Markdown is supported.\"\n            inputId=\"description\"\n            required\n            error={meta.error}\n            isInvalid={meta.invalid && meta.touched}\n            help=\"A clear and concise description of what the feature is. Styling with Markdown is supported.\"\n            maxWidth=\"50em\"\n            onChange={(event) => { input.onChange(event.target.value); setDescription(event.target.value); }}\n            value={input.value}\n            inputAttrs={{ ...input, rows: 4, isAutoResizable: true }}\n          />\n        )}\n      </Field>\n    </div>\n  );\n};\n\nFeatureForm.propTypes = propTypes;\nexport default FeatureForm;\n","const FeatureTemplate = props => `# Feature Request\n\n## Description\n${props.description}\n\n${props.context ? `## Additional Context / Screenshots\n${props.context}` : ''}\n\n${props.mentions ? `## Mentions\n${props.mentions}` : ''}`;\n\nexport default FeatureTemplate;\n","import React from 'react';\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\nimport { propTypes } from './Helper';\n\nconst FormContext = (props) => {\n  const { context, setContext } = props;\n  return (\n    <TextareaField\n      label=\"Additional Context / Screenshots\"\n      aria-label=\"Add any other context about the feature here. If applicable, add screenshots to help explain.\"\n      inputId=\"context\"\n      help=\"Add any other context about the feature here. If applicable, add screenshots to help explain.\"\n      maxWidth=\"50em\"\n      value={context}\n      onChange={event => setContext(event.target.value)}\n      inputAttrs={{ rows: 2, isAutoResizable: true }}\n    />\n  );\n};\n\nFormContext.propTypes = propTypes;\nexport default FormContext;\n","import React from 'react';\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\nimport { propTypes } from './Helper';\n\nconst FormMentions = (props) => {\n  const { mentions, setMentions } = props;\n  return (\n    <TextareaField\n      label=\"Mentions\"\n      aria-label=\"Mention anyone on the terra team that you have been working with so far.\"\n      inputId=\"mentions\"\n      help=\"Mention anyone on the terra team that you have been working with so far.\"\n      maxWidth=\"50em\"\n      value={mentions}\n      onChange={event => setMentions(event.target.value)}\n      inputAttrs={{ rows: 2, isAutoResizable: true }}\n    />\n  );\n};\n\nFormMentions.propTypes = propTypes;\nexport default FormMentions;\n","import React from 'react';\nimport { Field } from 'react-final-form';\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\nimport { propTypes, validateForm } from './Helper';\n\nconst FormTitle = (props) => {\n  const { setTitle } = props;\n  return (\n    <Field\n      name=\"title\"\n      validate={validateForm}\n    >\n      {({ input, meta }) => (\n        <TextareaField\n          label=\"Title\"\n          aria-label=\"Brief description. Selected package will be included in title.\"\n          inputId=\"title\"\n          required\n          error={meta.error}\n          isInvalid={meta.invalid && meta.touched}\n          help=\"Brief description. Selected package will be included in title.\"\n          maxWidth=\"50em\"\n          onChange={(event) => { input.onChange(event.target.value); setTitle(event.target.value); }}\n          value={input.value}\n          inputAttrs={{ ...input, rows: 1, isAutoResizable: true }}\n        />\n      )}\n    </Field>\n  );\n};\n\nFormTitle.propTypes = propTypes;\nexport default FormTitle;\n","import React from 'react';\nimport Field from 'terra-form-field';\nimport Select from 'terra-form-select';\nimport { propTypes } from './Helper';\n\nfunction IssueSelect(props) {\n  const {\n    setIssueType,\n    value,\n  } = props;\n\n  return (\n    <Field\n      label=\"Issue Type\"\n      help=\"Bug report, or feature request\"\n    >\n      <Select\n        aria-label=\"Issue Type drop down select menu. Select Bug Report or Feature Request.\"\n        onChange={setIssueType}\n        value={value}\n      >\n        <Select.Option\n          value=\"bug\"\n          display=\"Bug Report\"\n          key=\"bug\"\n        />\n        <Select.Option\n          value=\"feature\"\n          display=\"Feature Request\"\n          key=\"feature\"\n        />\n      </Select>\n    </Field>\n  );\n}\n\nIssueSelect.propTypes = propTypes;\nexport default IssueSelect;\n","import React from 'react';\nimport Field from 'terra-form-field';\nimport Select from 'terra-form-select';\nimport { getPackages, propTypes } from './Helper';\n\nconst packageList = getPackages().map(currentPackage => (\n  <Select.Option\n    value={currentPackage}\n    display={currentPackage}\n    key={currentPackage}\n  />\n));\n\nconst PackageSelect = (props) => {\n  const {\n    setPackage,\n  } = props;\n\n  return (\n    <Field\n      label=\"Package Name\"\n      help=\"Selected package for issue / feature request.\"\n    >\n      <Select\n        aria-label=\"Drop down menu for selecting the package related to the bug report or feature request.\"\n        onChange={setPackage}\n        defaultValue=\"terra-action-footer\"\n      >\n        {packageList}\n      </Select>\n    </Field>\n  );\n};\n\nPackageSelect.propTypes = propTypes;\nexport default PackageSelect;\n","import React, { useState, useEffect } from 'react';\nimport { Form } from 'react-final-form';\nimport ActionHeader from 'terra-action-header';\nimport ButtonGroup from 'terra-button-group';\nimport DialogModal from 'terra-dialog-modal';\nimport Heading from 'terra-heading';\nimport Markdown from 'terra-markdown';\nimport Spacer from 'terra-spacer';\nimport { disclosureManagerShape, withDisclosureManager } from 'terra-application/lib/disclosure-manager';\nimport ContentContainer from 'terra-content-container';\nimport BugForm from './BugForm';\nimport BugTemplate from './BugTemplate';\nimport FeatureForm from './FeatureForm';\nimport FeatureTemplate from './FeatureTemplate';\nimport FormContext from './FormContext';\nimport FormMentions from './FormMentions';\nimport FormTitle from './FormTitle';\nimport IssueSelect from './IssueSelect';\nimport PackageSelect from './PackageSelect';\nimport {\n  disclaimerTemplate, environmentTemplate, getRepo, titleTemplate,\n} from './Helper';\nimport styles from './IssueForm.scss';\n\n/* eslint-disable compat/compat */\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst initialState = {\n  context: '',\n  count: 0,\n  description: '',\n  environment: environmentTemplate,\n  expected: '',\n  isOpen: false,\n  issueType: 'bug',\n  mentions: '',\n  selectedPackage: 'terra-action-footer',\n  solution: '',\n  steps: '',\n  title: '',\n};\n\nconst propTypes = {\n  /**\n   * Injected by disclosure manager\n   */\n  disclosureManager: disclosureManagerShape.isRequired,\n};\n\nconst IssueForm = ({ disclosureManager }) => {\n  // Initialize state variables and setter functions.\n  const [context, setContext] = useState(initialState.context);\n  const [count, setCount] = useState(initialState.count);\n  const [description, setDescription] = useState(initialState.description);\n  const [environment, setEnvironment] = useState(initialState.environment);\n  const [expected, setExpected] = useState(initialState.expected);\n  const [isOpen, setIsOpen] = useState(initialState.isOpen);\n  const [issueType, setIssueType] = useState(initialState.issueType);\n  const [mentions, setMentions] = useState(initialState.mentions);\n  const [selectedPackage, setPackage] = useState(initialState.selectedPackage);\n  const [solution, setSolution] = useState(initialState.solution);\n  const [steps, setSteps] = useState(initialState.steps);\n  const [title, setTitle] = useState(initialState.title);\n\n  /**\n   * Initialize and track character count between updates and form changes.\n   * The total amount of characters that can be submitted in a URL is limited,\n   * so the form has an upper limit of 5500 characters. IE will fail at around 2K.\n   */\n  const total = issueType === 'bug'\n    ? [context, description, environment, expected, mentions, selectedPackage, solution, steps, title]\n      .reduce((prev, current) => prev + current).length\n    : [context, description, mentions, selectedPackage, title]\n      .reduce((prev, current) => prev + current).length;\n\n  // Basic test to check if form data has been entered when attempting to navigate away from the page.\n  const formDidUpdate = [title, description, steps, expected, context, mentions].reduce((prev, current) => prev + current).length > 0;\n  useEffect(() => {\n    setCount(total);\n    if (formDidUpdate) {\n      window.onbeforeunload = () => true;\n    } else {\n      window.onbeforeunload = undefined;\n    }\n    return () => {\n      window.onbeforeunload = undefined;\n    };\n  });\n\n  // Update repo based on the currently selected package.\n  const packageRepo = getRepo(selectedPackage);\n\n  // Construct issue body based on current input form data.\n  let issueBody = issueType === 'bug'\n    ? BugTemplate({\n      description,\n      steps,\n      context,\n      expected,\n      solution,\n      environment,\n      mentions,\n    })\n    : FeatureTemplate({ description, context, mentions });\n\n  /**\n   * Construct preview body. marked.js ignores new lines when inserting a block of text into a template;\n   * this maintains formatting entered into the form when previewing.\n   */\n  const createPreview = () => {\n    let issuePreview;\n    if (issueType === 'bug') {\n      issuePreview = {\n        context: context.replace(/(?:\\n)/g, '<br>'),\n        description: description.replace(/(?:\\n)/g, '<br>'),\n        environment,\n        expected: expected.replace(/(?:\\n)/g, '<br>'),\n        mentions: mentions.replace(/(?:\\n)/g, '<br>'),\n        solution: solution.replace(/(?:\\n)/g, '<br>'),\n        steps: steps.replace(/(?:\\n)/g, '<br>'),\n      };\n      return BugTemplate(issuePreview);\n    }\n    issuePreview = {\n      description: description.replace(/(?:\\n)/g, '<br>'),\n      context: context.replace(/(?:\\n)/g, '<br>'),\n      mentions: mentions.replace(/(?:\\n)/g, '<br>'),\n    };\n    return FeatureTemplate(issuePreview);\n  };\n\n  // Feed Markdown expected string value\n  const previewBody = titleTemplate(title, packageRepo, selectedPackage) + createPreview();\n\n  function handleModal() {\n    return !isOpen\n      ? setIsOpen(true)\n      : setIsOpen(false);\n  }\n\n  // Wait to ensure form validation has completed, then submit form data to the appropriate repo on github.\n  const submitForm = async () => {\n    await sleep(500);\n\n    if (count > 5500) {\n      issueBody = issueBody.slice(0, 5500);\n    }\n\n    const encodeTitle = encodeURIComponent(title).replace(/%2B/gi, '+');\n    const encodeBody = encodeURIComponent(issueBody).replace(/%2B/gi, '+');\n\n    window.open(\n      `https://github.com/cerner/${packageRepo}/issues/new?title=[${selectedPackage}] ${encodeTitle}&body=${encodeBody}`,\n    );\n\n    disclosureManager.closeDisclosure();\n  };\n\n  return (\n    <ContentContainer\n      header={(\n        <ActionHeader\n          title=\"Issue Form\"\n          onBack={disclosureManager.goBack}\n          onClose={disclosureManager.closeDisclosure}\n        />\n      )}\n      fill\n    >\n      <Spacer padding=\"large+2\">\n        <Heading level={1}>Issue Form</Heading>\n        <Markdown src={disclaimerTemplate} />\n        <div className={styles['issue-form-select-margin']}>\n          <IssueSelect issueType={issueType} setIssueType={setIssueType} value={issueType} />\n        </div>\n        <div className={styles['issue-form-select']}>\n          <PackageSelect setPackage={setPackage} />\n        </div>\n        <Form\n          onSubmit={submitForm}\n          subscription={{ submitting: true, pristine: true }}\n          render={({ handleSubmit, submitting, pristine }) => (\n            <form\n              onSubmit={handleSubmit}\n            >\n              <FormTitle setTitle={setTitle} />\n              { issueType === 'bug'\n                ? (\n                  <BugForm\n                    solution={solution}\n                    setDescription={setDescription}\n                    setEnvironment={setEnvironment}\n                    setExpected={setExpected}\n                    setSolution={setSolution}\n                    setSteps={setSteps}\n                  />\n                )\n                : (\n                  <FeatureForm\n                    setDescription={setDescription}\n                  />\n                )}\n              <FormContext context={context} setContext={setContext} />\n              <FormMentions mentions={mentions} setMentions={setMentions} />\n              <p>\n                {`Character count / max: ${count} / `}\n                {count > 5500 ? (\n                  <span>\n                    <span className={styles['error-text']}>5500</span>\n                    <br />\n                    Character count exceeded. Click Submit to continue on Github (Characters beyond form limit will be truncated).\n                  </span>\n                ) : 5500}\n              </p>\n              <DialogModal\n                ariaLabel=\"Default Dialog Modal\"\n                isOpen={isOpen}\n                onRequestClose={handleModal}\n                header={<ActionHeader title=\"Preview Issue\" onClose={handleModal} />}\n                footer={<div />}\n              >\n                <Spacer padding=\"large+2\">\n                  <Markdown src={previewBody} />\n                </Spacer>\n              </DialogModal>\n              <ButtonGroup>\n                <ButtonGroup.Button\n                  id=\"preview-button\"\n                  text=\"Preview\"\n                  onClick={handleModal}\n                  key=\"Preview\"\n                />\n                <ButtonGroup.Button\n                  text=\"Submit\"\n                  key=\"Submit\"\n                  type=\"submit\"\n                  isDisabled={submitting || pristine}\n                />\n              </ButtonGroup>\n            </form>\n          )}\n        />\n      </Spacer>\n    </ContentContainer>\n  );\n};\n\nIssueForm.propTypes = propTypes;\n\nexport default withDisclosureManager(IssueForm);\n"],"sourceRoot":""}