(window.webpackJsonp=window.webpackJsonp||[]).push([[193,438,439,440,441,442,443,444,445],{1007:function(e,t){},1388:function(e){e.exports=JSON.parse('{"_from":"terra-doc-template@^2.0.0","_id":"terra-doc-template@2.24.0","_inBundle":false,"_integrity":"sha512-0Ri9NUABZf5yy6ADYmfua2lJJdNGlmYXDGdAphhFMBjD8Oi3mkvHivfa5Dl4rfL1tcu2owp+WRrcIXeCBlQO0w==","_location":"/terra-doc-template","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-doc-template@^2.0.0","name":"terra-doc-template","escapedName":"terra-doc-template","rawSpec":"^2.0.0","saveSpec":null,"fetchSpec":"^2.0.0"},"_requiredBy":["/","/terra-application","/terra-card","/terra-clinical-item-collection/terra-responsive-element","/terra-clinical-item-collection/terra-table","/terra-clinical-item-display","/terra-clinical-item-view","/terra-clinical-result","/terra-heading","/terra-progress-bar","/terra-text"],"_resolved":"https://registry.npmjs.org/terra-doc-template/-/terra-doc-template-2.24.0.tgz","_shasum":"828cf9f8b8c83f87b1cdddb1eaa11f64b863269f","_spec":"terra-doc-template@^2.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-core/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","react-syntax-highlighter":"^11.0.0","terra-markdown":"^2.38.0","terra-props-table":"^2.45.0"},"deprecated":false,"description":"Provides an adjustable template for documentation pages.","gitHead":"386cab01eec19d715778905a31bdcfd448e6e1b2","homepage":"https://github.com/cerner/terra-core#readme","keywords":["Cerner","Terra","terra-doc-template","DocTemplate","UI"],"license":"Apache-2.0","main":"lib/DocTemplate.js","name":"terra-doc-template","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-core.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","jest":"jest --config ../../jestconfig.js","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","wdio":"npm run wdio-default && npm run wdio-lowlight && npm run wdio-fusion","wdio-default":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio-fusion":"cd ../.. && THEME=orion-fusion-theme npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio-lowlight":"cd ../.. && THEME=clinical-lowlight-theme npx wdio ./packages/$npm_package_name/clinical-lowlight-wdio.conf.js"},"version":"2.24.0"}')},2191:function(e,t,n){"use strict";n.r(t),t.default="# Terra Doc Template\n\nThe terra-doc-template component provides an adjustable template for documentation pages.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-doc-template`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n\n\n\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n"},2192:function(e,t){e.exports='<table style="display: table; margin-bottom: 1.25rem"><thead><tr style="line-height: 1.5"><th style="width: 10%">Prop Name</th><th style="width: 25%">Type</th><th style="width: 10%">Is Required</th><th style="width: 10%">Default Value</th><th style="width: 45%">Description</th></tr></thead><tbody><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">children</td><td style="padding-bottom: 1.8rem">node</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Enables the ability to add custom content to doc template. Children will be rendered after all other content.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">packageName</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'\'</td><td style="padding-bottom: 1.8rem">The given component&#39;s npm package name.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">packageUrl</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'\'</td><td style="padding-bottom: 1.8rem">The url for the provided package if not in npm. This will be ignored if packageVersion is not set.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">packageVersion</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'\'</td><td style="padding-bottom: 1.8rem">The given component&#39;s package version.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">readme</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'\'</td><td style="padding-bottom: 1.8rem">The given component&#39;s readme file imported to a string.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">srcPath</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'\'</td><td style="padding-bottom: 1.8rem">The url to the source code for the given component.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">examples</td><td style="padding-bottom: 1.8rem">An array of objects structured like:<br /><pre style="white-space: pre-wrap">{\n "name": "shape",\n "value": {\n  "title": {\n   "name": "string",\n   "required": false\n  },\n  "description": {\n   "name": "node",\n   "required": false\n  },\n  "example": {\n   "name": "element",\n   "required": false\n  },\n  "source": {\n   "name": "string",\n   "required": false\n  }\n }\n}</pre></td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">[]</td><td style="padding-bottom: 1.8rem">All of the example(s) that will be displayed. An empty array is supported.<pre><code style="white-space: pre-wrap">title: The title of the example\ndescription: A description of the example to be displayed below the title\nexample: The example to be displayed\nsource: The source code of the example</code></pre></td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">propsTables</td><td style="padding-bottom: 1.8rem">An array of objects structured like:<br /><pre style="white-space: pre-wrap">{\n "name": "shape",\n "value": {\n  "componentSrc": {\n   "name": "string",\n   "required": false\n  },\n  "componentName": {\n   "name": "string",\n   "required": false\n  },\n  "componentProps": {\n   "name": "string",\n   "required": false\n  },\n  "propsResolution": {\n   "name": "string",\n   "required": false\n  }\n }\n}</pre></td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">[]</td><td style="padding-bottom: 1.8rem">All of the props table(s) that will be displayed. An empty array is supported.<pre><code style="white-space: pre-wrap">componentSrc: The source code of the component\ncomponentName: The name of the component\npropsResolution: Type of react-docgen resolver to use for prop-types resolution. Supported values are `default` or `findAllComponentDefinitions`. Will use `default` if left unspecified.</code></pre></td></tr></tbody></table>'},2193:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport PropsTable from 'terra-props-table';\nimport Markdown from 'terra-markdown';\nimport classNames from 'classnames/bind';\nimport NpmBadge from './NpmBadge';\nimport IndexExampleTemplate from './ExampleTemplate';\nimport styles from './DocTemplate.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Enables the ability to add custom content to doc template. Children will be rendered after all other content.\n   */\n  children: PropTypes.node,\n  /**\n   * The given component's npm package name.\n   */\n  packageName: PropTypes.string,\n  /**\n   * The url for the provided package if not in npm. This will be ignored if packageVersion is not set.\n   */\n  packageUrl: PropTypes.string,\n  /**\n   * The given component's package version.\n   */\n  packageVersion: PropTypes.string,\n  /**\n   * The given component's readme file imported to a string.\n   */\n  readme: PropTypes.string,\n  /**\n   * The url to the source code for the given component.\n   */\n  srcPath: PropTypes.string,\n  /**\n   * All of the example(s) that will be displayed. An empty array is supported.\n   * ```\n   * title: The title of the example\n   * description: A description of the example to be displayed below the title\n   * example: The example to be displayed\n   * source: The source code of the example\n   * ```\n   */\n  examples: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.node,\n    example: PropTypes.element,\n    source: PropTypes.string,\n  })),\n  /**\n   * All of the props table(s) that will be displayed. An empty array is supported.\n   * ```\n   * componentSrc: The source code of the component\n   * componentName: The name of the component\n   * propsResolution: Type of react-docgen resolver to use for prop-types resolution. Supported values are `default` or `findAllComponentDefinitions`. Will use `default` if left unspecified.\n   * ```\n   */\n  propsTables: PropTypes.arrayOf(PropTypes.shape({\n    componentSrc: PropTypes.string,\n    componentName: PropTypes.string,\n    componentProps: PropTypes.string,\n    propsResolution: PropTypes.string,\n  })),\n};\n\nconst defaultProps = {\n  packageName: '',\n  packageUrl: '',\n  packageVersion: '',\n  readme: '',\n  srcPath: '',\n  examples: [],\n  propsTables: [],\n};\n\nconst DocTemplate = ({\n  packageName, packageVersion, packageUrl, readme, srcPath, examples, propsTables, children, ...customProps\n}) => {\n  const localExamples = examples;\n  let localPropsTables;\n  if (propsTables) localPropsTables = propsTables;\n\n  // Assign unique identifiers to use as keys later\n  let id = 0;\n  for (let i = 0; i < localExamples.length; i += 1) {\n    localExamples[i].id = id;\n    id += 1;\n  }\n\n  if (localPropsTables) {\n    for (let i = 0; i < localPropsTables.length; i += 1) {\n      localPropsTables[i].id = id;\n      id += 1;\n    }\n  }\n\n  const docTemplateClassNames = cx([\n    'doc-template',\n    customProps.className,\n  ]);\n\n  let exampleHeader;\n  if (localExamples.length > 0) {\n    const exampleHeaderText = localExamples.length > 1 ? 'Examples' : 'Example';\n    exampleHeader = <h1 className={cx('examples-header')}>{exampleHeaderText}</h1>;\n  }\n\n  const badge = (\n    <NpmBadge\n      packageName={packageName}\n      packageUrl={packageUrl}\n      packageVersion={packageVersion}\n    />\n  );\n\n  return (\n    <div {...customProps} className={docTemplateClassNames}>\n      <div className={cx('doc-card')}>\n        {packageName && badge}\n        {readme && <Markdown src={readme} />}\n        {srcPath && <a href={srcPath}>View component source code</a>}\n      </div>\n\n      {exampleHeader}\n      {localExamples.map(example => (\n        <IndexExampleTemplate\n          title={example.title}\n          example={example.example}\n          exampleSrc={example.source}\n          description={example.description}\n          key={example.id}\n        />\n      ))}\n\n      <div className={cx('doc-card')}>\n        {propsTables[0] && propsTables[0].componentProps\n          ? localPropsTables.map(propsTable => (\n            <div className={cx('props-table-markdown')} key={propsTable.id}>\n              <h2>\n                {propsTable.componentName}\n                {' Props'}\n              </h2>\n              <Markdown src={propsTable.componentProps} />\n            </div>\n          ))\n          : localPropsTables.map(propsTable => (\n            <PropsTable\n              src={propsTable.componentSrc}\n              componentName={propsTable.componentName}\n              key={propsTable.id}\n              propsResolution={propsTable.propsResolution}\n            />\n          ))}\n      </div>\n      {children && <div className={cx('doc-card')}>{children}</div>}\n    </div>\n  );\n};\n\nDocTemplate.propTypes = propTypes;\nDocTemplate.defaultProps = defaultProps;\n\nexport default DocTemplate;\n"},2194:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=p(n(0)),o=p(n(1557)),r=n(1388);function p(e){return e&&e.__esModule?e:{default:e}}var l=function(){return a.default.createElement("div",null,a.default.createElement("p",null,"Dynamically generated npm badge:"),a.default.createElement(o.default,{packageName:r.name}),a.default.createElement("p",null,"Custom Badge with packageVersion prop set:"),a.default.createElement(o.default,{packageName:r.name,packageVersion:r.version}),a.default.createElement("p",null,"Custom Badge with packageUrl and packageVersion props set:"),a.default.createElement(o.default,{packageName:r.name,packageUrl:"https://engineering.cerner.com/terra-ui/components/terra-doc-template/doc-template/doc-template",packageVersion:r.version}))};t.default=l},2195:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport NpmBadge from '../../../NpmBadge';\nimport { name, version } from '../../../../package.json';\n\nconst packageUrl = 'https://engineering.cerner.com/terra-ui/components/terra-doc-template/doc-template/doc-template';\n\nconst BadgeExamples = () => (\n  <div>\n    <p>Dynamically generated npm badge:</p>\n    <NpmBadge packageName={name} />\n    <p>Custom Badge with packageVersion prop set:</p>\n    <NpmBadge packageName={name} packageVersion={version} />\n    <p>Custom Badge with packageUrl and packageVersion props set:</p>\n    <NpmBadge packageName={name} packageUrl={packageUrl} packageVersion={version} />\n  </div>\n);\n\nexport default BadgeExamples;\n"},2196:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport DocTemplate from '../../../../lib/DocTemplate';\nimport readme from '../../../../docs/README.md';\n\nimport { name, version } from '../../../../package.json';\n\n/* eslint-disable import/no-webpack-loader-syntax, import/first, import/no-duplicates */\nimport DocTemplatePropsTable from '!terra-props-table-loader!../../../../src/DocTemplate';\nimport DocTemplateSrc from '!raw-loader!../../../../src/DocTemplate';\nimport BadgeExamples from '../example/BadgeExamples';\nimport BadgeExamplesSrc from '!raw-loader!../../../../src/terra-dev-site/doc/example/BadgeExamples';\n\n/* eslint-disable-next-line import/no-self-import */\nimport SelfSrc from '!raw-loader!../../../../src/terra-dev-site/doc/doc-template/DocTemplate.1.doc';\n\nconst DocTemplateExamples = () => (\n  <DocTemplate\n    packageName={name}\n    packageVersion={version}\n    readme={readme}\n    srcPath=\"https://github.com/cerner/terra-core/tree/master/packages/terra-doc-template\"\n    examples={[\n      {\n        title: 'DocTemplate',\n        source: SelfSrc,\n        example: (<p>This very page was generated using the DocTemplate. The template supports more than one Props Table and example, even though those were not featured here.</p>),\n      },\n      {\n        title: 'Package Badge Examples',\n        source: BadgeExamplesSrc,\n        example: <BadgeExamples />,\n      },\n    ]}\n    propsTables={[\n      {\n        componentName: 'Doc Template',\n        componentSrc: DocTemplateSrc,\n        componentProps: DocTemplatePropsTable,\n      },\n    ]}\n  />\n);\n\nexport default DocTemplateExamples;\n"},3096:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=c(n(0)),o=c(n(1006)),r=c(n(2191)),p=n(1388),l=c(n(2192)),s=c(n(2193)),d=c(n(2194)),i=c(n(2195)),m=c(n(2196));function c(e){return e&&e.__esModule?e:{default:e}}var g=function(){return a.default.createElement(o.default,{packageName:p.name,packageVersion:p.version,readme:r.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/terra-doc-template",examples:[{title:"DocTemplate",source:m.default,example:a.default.createElement("p",null,"This very page was generated using the DocTemplate. The template supports more than one Props Table and example, even though those were not featured here.")},{title:"Package Badge Examples",source:i.default,example:a.default.createElement(d.default,null)}],propsTables:[{componentName:"Doc Template",componentSrc:s.default,componentProps:l.default}]})};t.default=g}}]);
//# sourceMappingURL=193-53818be2078f3e70b902.js.map