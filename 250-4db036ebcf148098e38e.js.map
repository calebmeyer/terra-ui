{"version":3,"sources":["webpack:///./node_modules/terra-clinical-item-collection/package.json","webpack:///./node_modules/terra-clinical-item-collection/lib/terra-dev-site/doc/clinical-item-collection/SelectableImplementation.2.doc.mdx","webpack:///./node_modules/terra-dev-site/lib/loader-components/_NpmBadge.js","webpack:///./node_modules/terra-dev-site/lib/loader-components/NpmBadge.module.scss?1d27"],"names":["Badge","url","name","version","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","Object","defineProperty","exports","value","default","_react","_interopRequireDefault","_propTypes","_bind","_NpmBadgeModule","obj","__esModule","cx","bind","propTypes","string","isRequired","NpmBadge","_ref","createElement","className","href","concat","_default","module"],"mappings":"6FAAA,wEAGaA,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACf,kBAAC,IAAD,CACEC,KAAK,iCACLC,QAAQ,SACRF,IAAKA,M,grBCAb,IAKMG,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,cAAC,IAAD,CAAOA,QAAQ,UACf,mBAAQ,CACN,GAAM,6BADR,6BAGA,mkBACA,mBAAQ,CACN,GAAM,0BADR,0BAGA,4IACS,4BAAYC,WAAW,KAAvB,YADT,mGAES,4BAAYA,WAAW,KAAvB,gBAFT,4EAGa,4BAAYA,WAAW,KAAvB,gBAHb,mSAKS,4BAAYA,WAAW,KAAvB,cALT,kEAMa,4BAAYA,WAAW,KAAvB,cANb,sCAOA,mBAAQ,CACN,GAAM,sCADR,sCAGA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,k9DAiETJ,EAAWK,gBAAiB,G,iCCvG5BC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuB,EAAQ,IAExCC,EAAaD,EAAuB,EAAQ,IAE5CE,EAAQF,EAAuB,EAAQ,IAEvCG,EAAkBH,EAAuB,EAAQ,MAErD,SAASA,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAEvF,IAAIE,EAAKJ,EAAMJ,QAAQS,KAAKJ,EAAgBL,SAExCU,EAAY,CAIdvB,KAAMgB,EAAWH,QAAQW,OAAOC,WAKhC1B,IAAKiB,EAAWH,QAAQW,OAKxBvB,QAASe,EAAWH,QAAQW,OAAOC,YAGjCC,EAAW,SAAkBC,GAC/B,IAAI3B,EAAO2B,EAAK3B,KACZD,EAAM4B,EAAK5B,IACXE,EAAU0B,EAAK1B,QACnB,OAAOa,EAAOD,QAAQe,cAAc,MAAO,CACzCC,UAAWR,EAAG,oBACbP,EAAOD,QAAQe,cAAc,IAAK,CACnCC,UAAWR,EAAG,SACdS,KAAM/B,GAAO,iCAAiCgC,OAAO/B,EAAM,OAAO+B,OAAO9B,IACxEa,EAAOD,QAAQe,cAAc,OAAQ,CACtCC,UAAWR,EAAG,eACbtB,EAAM,UAAY,OAAQe,EAAOD,QAAQe,cAAc,OAAQ,CAChEC,UAAWR,EAAG,kBACb,IAAIU,OAAO9B,OAGhByB,EAASH,UAAYA,EACrB,IAAIS,EAAWN,EACff,EAAQE,QAAUmB,G,oBCrDlBC,EAAOtB,QAAU,CAAC,MAAQ,iCAAiC,kBAAkB,2CAA2C,aAAa,sCAAsC,gBAAgB","file":"250-4db036ebcf148098e38e.js","sourcesContent":["import React from 'react';\nimport NpmBadge from 'terra-dev-site/lib/loader-components/_NpmBadge';\n\nexport const Badge = ({ url }) => (\n      <NpmBadge\n        name=\"terra-clinical-item-collection\"\n        version=\"4.15.0\"\n        url={url}\n      />\n    );","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Badge } from 'terra-clinical-item-collection/package.json?dev-site-package';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Badge mdxType=\"Badge\" />\n    <h1 {...{\n      \"id\": \"selectable-implementation\"\n    }}>{`Selectable Implementation`}</h1>\n    <p>{`The Item Collection provides the foundation to be rendered as a selectable component when a selection event is provided to the collection and items are indicated as selectable. The selection state management is then controlled by the component rendering the Item Collection. When an item receives a click or keydown event, the event and item key is returned such that the desired selection logic can be applied before updating the item's selection state. This means that the Item Collection is capable of being a single- or multi- selectable component.`}</p>\n    <h3 {...{\n      \"id\": \"implementation-details\"\n    }}>{`Implementation Details`}</h3>\n    <p>{`To create a Selectable Item Collection, add the following to a static Item Collection implementation:\n1. Pass an `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` function to the ItemCollection. This function will handle selection state updates.\n2. Add the `}<inlineCode parentName=\"p\">{`isSelectable`}</inlineCode>{` prop to each Item that should have selectable behavior.\n1. When adding `}<inlineCode parentName=\"p\">{`isSelectable`}</inlineCode>{`, the following attributes are added to the item: hover and focus styles, tabIndex=0, onClick and onKeyDown events. These events use the onSelect function passed to the ItemCollection.\n3. Add a unique key to each item. These keys should be managed to handle selection state.\n4. Add the `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` prop to the items that have a selected state.\n1. When adding `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{`, the selected styles are applied.`}</p>\n    <h3 {...{\n      \"id\": \"selectable-item-collection-example\"\n    }}>{`Selectable Item Collection Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import React from 'react';\nimport ItemCollection from 'terra-clinical-item-collection';\n\nclass SelectableExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n+     selectedKey: //add logic that determines the selected index\n    };\n+   this.handleOnSelect = this.handleOnSelect.bind(this);\n  }\n\n+ handleOnSelect(event, selectedKey) {\n+   if ( // add logic to determine if selection should occur ) {\n+     event.preventDefault();\n+     this.setState({ selectedKey });\n+   }\n+ }\n\n  render() {\n    return (\n      <ItemCollection\n        breakpoint=\"tiny\"\n        hasStartAccessory\n        numberOfDisplays={3}\n        hasComment\n        hasEndAccessory\n+       onSelect={this.handleOnSelect}                      // Step 1\n      >\n        <ItemCollection.Item\n+         isSelectable                                      // Step 2\n+         key=\"key-1\"                                       // Step 3\n+         isSelected={this.state.selectedKey === 'key-1'}   // Step 4\n          startAccessory={<Icon/>}\n          comment={<ItemCollection.Comment text=\"Comment\" />}\n          endAccessory={<Icon/>}\n        >\n          <ItemCollection.Display text=\"Display 1\" />\n          <ItemCollection.Display text=\"Display 2\" />\n          <ItemCollection.Display text=\"Display 3\" />\n        </ItemCollection.Item>\n        <ItemCollection.Item\n+         isSelectable                                      // Step 2\n+         key=\"key-2\"                                       // Step 3\n+         isSelected={this.state.selectedKey === 'key-2'}   // Step 4\n          startAccessory={<Icon/>}\n          comment={<ItemCollection.Comment text=\"Comment\" />}\n          endAccessory={<Icon/>}\n        >\n          <ItemCollection.Display text=\"Display 1\" />\n          <ItemCollection.Display text=\"Display 2\" />\n        </ItemCollection.Item>\n      </ItemCollection>\n    );\n  }\n}\n\nexport default SelectableExample;\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _NpmBadgeModule = _interopRequireDefault(require(\"./NpmBadge.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_NpmBadgeModule.default);\n\nvar propTypes = {\n  /**\n   * component name.\n   */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n   * url to link to\n   */\n  url: _propTypes.default.string,\n\n  /**\n   * The package version.\n   */\n  version: _propTypes.default.string.isRequired\n};\n\nvar NpmBadge = function NpmBadge(_ref) {\n  var name = _ref.name,\n      url = _ref.url,\n      version = _ref.version;\n  return _react.default.createElement(\"div\", {\n    className: cx('badge-container')\n  }, _react.default.createElement(\"a\", {\n    className: cx('badge'),\n    href: url || \"https://www.npmjs.org/package/\".concat(name, \"/v/\").concat(version)\n  }, _react.default.createElement(\"span\", {\n    className: cx('badge-name')\n  }, url ? 'package' : 'npm'), _react.default.createElement(\"span\", {\n    className: cx('badge-version')\n  }, \"v\".concat(version))));\n};\n\nNpmBadge.propTypes = propTypes;\nvar _default = NpmBadge;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"NpmBadge-module__badge___3p041\",\"badge-container\":\"NpmBadge-module__badge-container___2W9ft\",\"badge-name\":\"NpmBadge-module__badge-name___2TNAy\",\"badge-version\":\"NpmBadge-module__badge-version___3bRIz\"};"],"sourceRoot":""}